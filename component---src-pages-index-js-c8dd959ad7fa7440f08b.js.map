{"version":3,"file":"component---src-pages-index-js-c8dd959ad7fa7440f08b.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/camelcase/index.js","webpack://gatsby-starter-default/../src/image-utils.ts","webpack://gatsby-starter-default/../src/components/hooks.ts","webpack://gatsby-starter-default/../src/components/picture.tsx","webpack://gatsby-starter-default/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-default/../src/components/placeholder.tsx","webpack://gatsby-starter-default/../src/components/main-image.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-default/../src/components/static-image.server.tsx","webpack://gatsby-starter-default/../src/components/static-image.tsx","webpack://gatsby-starter-default/./src/components/Layout.js","webpack://gatsby-starter-default/./src/config/config.js","webpack://gatsby-starter-default/./src/components/HeroSVG.js","webpack://gatsby-starter-default/./src/components/DorianDeptuch.js","webpack://gatsby-starter-default/./src/components/HeroHeading.js","webpack://gatsby-starter-default/./src/components/Hero.js","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://gatsby-starter-default/./src/components/WaveSVG.js","webpack://gatsby-starter-default/./src/components/Skills.js","webpack://gatsby-starter-default/./src/components/Portrait.js","webpack://gatsby-starter-default/./static/Resume FS October 2023 (1).pdf","webpack://gatsby-starter-default/./src/components/FullSkills.js","webpack://gatsby-starter-default/./src/components/About.js","webpack://gatsby-starter-default/./src/components/Carousel.js","webpack://gatsby-starter-default/./src/components/Projects.js","webpack://gatsby-starter-default/./src/components/ContactIcons.js","webpack://gatsby-starter-default/./src/components/Contact.js","webpack://gatsby-starter-default/./src/pages/index.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport \"./layout.css\"\n\nconst StyledFooter = styled.footer`\n  background-color: hsl(184, 74%, 44%);\n  color: #07093f;\n  text-align: center;\n  padding: 0.5rem;\n  margin-top: -0.5rem;\n`\n\nconst StyledLayout = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  margin: 0 auto;\n  background-color: #06083e;\n  overflow-x: hidden;\n  display: grid;\n  ${\"\" /* max-width: 1200px; */}\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: 100%;\n  #main-content {\n    width: 100%;\n    max-width: 62.5rem;\n    margin: 0 auto;\n    padding: 0 2.5rem;\n  }\n`\n\nconst Layout = ({ children }) => {\n  return (\n    <StyledLayout>\n      <main>{children}</main>\n      <StyledFooter>\n        © {new Date().getFullYear()} &middot; Dorian Deptuch\n      </StyledFooter>\n    </StyledLayout>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","export const BACKGROUND = \"#07093f\"\nexport const PRIMARY = \"hsl(184, 74%, 44%)\"\nexport const SECONDARY = \"hsl(332, 87%, 70%)\"\n\nexport const device = {\n  mobile: `(max-width: 480px)`,\n  tablet: `(max-width: 768px)`,\n  laptop: `(max-width: 1024px)`,\n  desktop: `(max-width: 1200px)`,\n}\n","import React from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport { device } from \"../config/config\"\n\nconst rotateCWAnimation = keyframes`\n    from {\n        transform: rotateZ(0deg)\n    }\n    to {\n        transform: rotateZ(360deg)\n    }\n`\n\nconst rotateCCWAnimation = keyframes`\n    from {\n        transform: rotateZ(0deg)\n    }\n    to {\n        transform: rotateZ(-360deg)\n    }\n`\n\nconst StyledDiv = styled.div`\n\n  background-attachment: fixed;\n  margin: 3rem;\n\n  circle:nth-child(2),\n  circle:nth-child(4),\n  circle:nth-child(6),\n  circle:nth-child(8) {\n    animation: ${rotateCWAnimation} 60s infinite linear 6s;\n    transform-origin: center;\n  }\n\n  circle:nth-child(1),\n  circle:nth-child(3),\n  circle:nth-child(5),\n  circle:nth-child(7) {\n    animation: ${rotateCCWAnimation} 60s infinite linear 6s;\n    transform-origin: center;\n  } \n  }\n\n  @media only screen and ${device.tablet} {\n    margin: 1rem 1rem 0 1rem;\n  }\n`\n\nexport default function HeroSVG() {\n  return (\n    <StyledDiv>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        xmlnsSvgjs=\"http://svgjs.dev/svgjs\"\n        viewBox=\"0 0 800 800\"\n      >\n        <defs>\n          <linearGradient\n            x1=\"50%\"\n            y1=\"0%\"\n            x2=\"50%\"\n            y2=\"100%\"\n            id=\"ggglitch-grad\"\n          >\n            <stop\n              stop-color=\"hsl(184, 74%, 44%)\"\n              stop-opacity=\"1\"\n              offset=\"45%\"\n            ></stop>\n            <stop\n              stop-color=\"hsl(332, 87%, 70%)\"\n              stop-opacity=\"1\"\n              offset=\"100%\"\n            ></stop>\n          </linearGradient>\n          <clipPath id=\"SvgjsClipPath1034\">\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"0\" y=\"0\"></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"133.33333333333334\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"266.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"400\" y=\"0\"></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"533.3333333333334\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"666.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"800\" y=\"0\"></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"933.3333333333334\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1066.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"1200\" y=\"0\"></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1333.3333333333335\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1466.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"1600\" y=\"0\"></rect>\n          </clipPath>\n          <clipPath id=\"SvgjsClipPath1035\">\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"66.66666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"200\" y=\"0\"></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"333.3333333333333\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"466.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"600.0000000000001\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"733.3333333333334\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"866.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1000.0000000000001\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1133.3333333333333\"\n              y=\"0\"\n            ></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1266.6666666666667\"\n              y=\"0\"\n            ></rect>\n            <rect width=\"66.66666666666667\" height=\"800\" x=\"1400\" y=\"0\"></rect>\n            <rect\n              width=\"66.66666666666667\"\n              height=\"800\"\n              x=\"1533.3333333333333\"\n              y=\"0\"\n            ></rect>\n          </clipPath>\n        </defs>\n        <g stroke-width=\"45\" stroke=\"url(#ggglitch-grad)\" fill=\"none\">\n          <circle\n            r=\"365\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            opacity=\"0.25\"\n            clip-path='url(\"#SvgjsClipPath1034\")'\n          ></circle>\n          <circle\n            r=\"265\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            opacity=\"0.25\"\n            clip-path='url(\"#SvgjsClipPath1034\")'\n          ></circle>\n          <circle\n            r=\"165\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            opacity=\"0.25\"\n            clip-path='url(\"#SvgjsClipPath1034\")'\n          ></circle>\n          <circle\n            r=\"65\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            opacity=\"0.25\"\n            clip-path='url(\"#SvgjsClipPath1034\")'\n          ></circle>\n          <circle\n            r=\"377.5\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            clip-path='url(\"#SvgjsClipPath1035\")'\n          ></circle>\n          <circle\n            r=\"277.5\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            clip-path='url(\"#SvgjsClipPath1035\")'\n          ></circle>\n          <circle\n            r=\"177.5\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            clip-path='url(\"#SvgjsClipPath1035\")'\n          ></circle>\n          <circle\n            r=\"77.5\"\n            cx=\"400\"\n            cy=\"400\"\n            fill=\"none\"\n            clip-path='url(\"#SvgjsClipPath1035\")'\n          ></circle>\n        </g>\n      </svg>\n    </StyledDiv>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport { device } from \"../config/config\"\n\nconst textAnimation = keyframes`\nto {\n  stroke-dashoffset: 0;\n}\n`\n\nconst shadowAnimation = keyframes`\n  from {\n    filter: none;\n  }\n  to {\n    filter: drop-shadow(5px 5px #000);\n  }\n`\nconst shadowAnimationTablet = keyframes`\n  from {\n    filter: none;\n  }\n  to {\n    filter: drop-shadow(3px 3px #000);\n  }\n`\nconst shadowAnimationMobile = keyframes`\n  from {\n    filter: none;\n  }\n  to {\n    filter: drop-shadow(1px 1px #000);\n  }\n`\nconst fillAnimation = keyframes`\n  from {\n    fill: transparent\n  }\n  to {\n    fill: \"url(#linear)\"\n    ${\"\" /* fill:hsl(184, 74%, 44%); */}\n  }\n`\n\nconst StyledDiv = styled.div`\n  width: 100%;\n  height: 100%;\n  margin-top: 1rem;\n\n  svg {\n    animation: ${shadowAnimation} 0.5s ease forwards 5.5s;\n  }\n\n  g {\n    animation: ${fillAnimation} 0.5s ease forwards 5.5s;\n  }\n\n  path:nth-child(1) {\n    stroke-dasharray: 508;\n    stroke-dashoffset: 508;\n    animation: ${textAnimation} 2s ease forwards 2s;\n  }\n  path:nth-child(2) {\n    stroke-dasharray: 503;\n    stroke-dashoffset: 503;\n    animation: ${textAnimation} 2s ease forwards 2.1s;\n  }\n  path:nth-child(3) {\n    stroke-dasharray: 488.059;\n    stroke-dashoffset: 488.059;\n    animation: ${textAnimation} 2s ease forwards 2.2s;\n  }\n  path:nth-child(4) {\n    stroke-dasharray: 201;\n    stroke-dashoffset: 201;\n    animation: ${textAnimation} 2s ease forwards 2.3s;\n  }\n  path:nth-child(5) {\n    stroke-dasharray: 435;\n    stroke-dashoffset: 435;\n    animation: ${textAnimation} 2s ease forwards 2.4s;\n  }\n  path:nth-child(6) {\n    stroke-dasharray: 537;\n    stroke-dashoffset: 537;\n    animation: ${textAnimation} 2s ease forwards 2.5s;\n  }\n  path:nth-child(7) {\n    stroke-dasharray: 508;\n    stroke-dashoffset: 508;\n    animation: ${textAnimation} 2s ease forwards 2.6s;\n  }\n  path:nth-child(8) {\n    stroke-dasharray: 412;\n    stroke-dashoffset: 412;\n    animation: ${textAnimation} 2s ease forwards 2.7s;\n  }\n  path:nth-child(9) {\n    stroke-dasharray: 399;\n    stroke-dashoffset: 399;\n    animation: ${textAnimation} 2s ease forwards 2.8s;\n  }\n  path:nth-child(10) {\n    stroke-dasharray: 299;\n    stroke-dashoffset: 299;\n    animation: ${textAnimation} 2s ease forwards 2.9s;\n  }\n  path:nth-child(11) {\n    stroke-dasharray: 430;\n    stroke-dashoffset: 430;\n    animation: ${textAnimation} 2s ease forwards 3s;\n  }\n  path:nth-child(12) {\n    stroke-dasharray: 452;\n    stroke-dashoffset: 452;\n    animation: ${textAnimation} 2s ease forwards 3.1s;\n  }\n  path:nth-child(13) {\n    stroke-dasharray: 475;\n    stroke-dashoffset: 475;\n    animation: ${textAnimation} 2s ease forwards 3.2s;\n  }\n\n  @media only screen and ${device.tablet} {\n    margin-top: 0.5rem;\n    svg {\n      animation: ${shadowAnimationTablet} 0.5s ease forwards 5.5s;\n    }\n  }\n  @media only screen and ${device.mobile} {\n    margin-top: 0;\n    svg {\n      animation: ${shadowAnimationMobile} 0.5s ease forwards 5.5s;\n    }\n  }\n`\n\nexport default function DorianDeptuch() {\n  const [backgroundColor, setBackgroundColor] = useState(\"transparent\")\n\n  useEffect(() => {\n    setTimeout(() => {\n      setBackgroundColor(\"url(#linear)\")\n    }, 5500)\n  }, [])\n\n  return (\n    <StyledDiv className=\"Logo\">\n      <svg\n        id=\"DorianDeptuch\"\n        viewBox=\"0 0 1076 102\"\n        fill=\"url(#test)\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        preserveAspectRatio=\"xMinYMin meet\"\n      >\n        <defs>\n          <linearGradient id=\"linear\" x1=\"0%\" y1=\"100%\" x2=\"0%\" y2=\"0%\">\n            <stop offset=\"0%\" stop-color=\"hsl(184, 74%, 44%)\" />\n            <stop offset=\"100%\" stop-color=\"hsl(332, 87%, 70%)\" />\n          </linearGradient>\n        </defs>\n        {/* <animate\n          href=\"#linear\"\n          attributeName=\"stop-color\"\n          from=\"hsl(184, 74%, 44%)\"\n          to=\"hsl(332, 87%, 70%)\"\n          dur=\"1s\"\n          begin=\"3.5s\"\n          // fill=\"freeze\"\n        /> */}\n        <g fill={backgroundColor}>\n          <path\n            d=\"M33.632 6.78399C43.36 6.78399 51.7654 8.61865 58.848 12.288C66.016 15.872 71.4774 21.0347 75.232 27.776C79.072 34.5173 80.992 42.4533 80.992 51.584C80.992 60.7147 79.072 68.6507 75.232 75.392C71.4774 82.048 66.016 87.168 58.848 90.752C51.7654 94.2507 43.36 96 33.632 96H5.85602V6.78399H33.632ZM33.632 86.4C45.152 86.4 53.9414 83.3707 60 77.312C66.0587 71.168 69.088 62.592 69.088 51.584C69.088 40.4907 66.016 31.8293 59.872 25.6C53.8134 19.3707 45.0667 16.256 33.632 16.256H17.504V86.4H33.632Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M136.804 96.896C128.527 96.896 120.975 94.976 114.148 91.136C107.321 87.2107 101.903 81.792 97.892 74.88C93.9667 67.8827 92.004 60.032 92.004 51.328C92.004 42.624 93.9667 34.816 97.892 27.904C101.903 20.9067 107.321 15.488 114.148 11.648C120.975 7.72265 128.527 5.75999 136.804 5.75999C145.167 5.75999 152.761 7.72265 159.588 11.648C166.415 15.488 171.791 20.864 175.716 27.776C179.641 34.688 181.604 42.5387 181.604 51.328C181.604 60.1173 179.641 67.968 175.716 74.88C171.791 81.792 166.415 87.2107 159.588 91.136C152.761 94.976 145.167 96.896 136.804 96.896ZM136.804 86.784C143.033 86.784 148.623 85.3333 153.572 82.432C158.607 79.5307 162.532 75.392 165.348 70.016C168.249 64.64 169.7 58.4107 169.7 51.328C169.7 44.16 168.249 37.9307 165.348 32.64C162.532 27.264 158.649 23.1253 153.7 20.224C148.751 17.3227 143.119 15.872 136.804 15.872C130.489 15.872 124.857 17.3227 119.908 20.224C114.959 23.1253 111.033 27.264 108.132 32.64C105.316 37.9307 103.908 44.16 103.908 51.328C103.908 58.4107 105.316 64.64 108.132 70.016C111.033 75.392 114.959 79.5307 119.908 82.432C124.943 85.3333 130.575 86.784 136.804 86.784Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M243.957 96L222.709 59.52H208.629V96H196.981V6.78399H225.781C232.522 6.78399 238.197 7.93599 242.805 10.24C247.498 12.544 250.997 15.6587 253.301 19.584C255.605 23.5093 256.757 27.9893 256.757 33.024C256.757 39.168 254.965 44.5867 251.381 49.28C247.882 53.9733 242.592 57.088 235.509 58.624L257.909 96H243.957ZM208.629 50.176H225.781C232.096 50.176 236.832 48.64 239.989 45.568C243.146 42.4107 244.725 38.2293 244.725 33.024C244.725 27.7333 243.146 23.6373 239.989 20.736C236.917 17.8347 232.181 16.384 225.781 16.384H208.629V50.176Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M286.504 6.78399V96H274.856V6.78399H286.504Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M359.092 76.16H320.18L313.012 96H300.724L332.98 7.29599H346.42L378.548 96H366.26L359.092 76.16ZM355.764 66.688L339.636 21.632L323.508 66.688H355.764Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M462.75 96H451.102L404.254 24.96V96H392.606V6.65599H404.254L451.102 77.568V6.65599H462.75V96Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M544.507 6.78399C554.235 6.78399 562.64 8.61865 569.723 12.288C576.891 15.872 582.352 21.0347 586.107 27.776C589.947 34.5173 591.867 42.4533 591.867 51.584C591.867 60.7147 589.947 68.6507 586.107 75.392C582.352 82.048 576.891 87.168 569.723 90.752C562.64 94.2507 554.235 96 544.507 96H516.731V6.78399H544.507ZM544.507 86.4C556.027 86.4 564.816 83.3707 570.875 77.312C576.934 71.168 579.963 62.592 579.963 51.584C579.963 40.4907 576.891 31.8293 570.747 25.6C564.688 19.3707 555.942 16.256 544.507 16.256H528.379V86.4H544.507Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M618.879 16.256V46.08H651.391V55.68H618.879V86.4H655.231V96H607.231V6.65599H655.231V16.256H618.879Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M732.504 32.896C732.504 40.32 729.944 46.5067 724.824 51.456C719.789 56.32 712.067 58.752 701.656 58.752H684.504V96H672.856V6.78399H701.656C711.725 6.78399 719.363 9.21599 724.568 14.08C729.859 18.944 732.504 25.216 732.504 32.896ZM701.656 49.152C708.141 49.152 712.92 47.744 715.992 44.928C719.064 42.112 720.6 38.1013 720.6 32.896C720.6 21.888 714.285 16.384 701.656 16.384H684.504V49.152H701.656Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M801.893 6.78399V16.256H777.573V96H765.925V16.256H741.477V6.78399H801.893Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M827.623 6.78399V63.232C827.623 71.168 829.543 77.056 833.383 80.896C837.308 84.736 842.727 86.656 849.639 86.656C856.466 86.656 861.799 84.736 865.639 80.896C869.564 77.056 871.527 71.168 871.527 63.232V6.78399H883.175V63.104C883.175 70.528 881.682 76.8 878.695 81.92C875.708 86.9547 871.655 90.7093 866.535 93.184C861.5 95.6587 855.826 96.896 849.511 96.896C843.196 96.896 837.479 95.6587 832.359 93.184C827.324 90.7093 823.314 86.9547 820.327 81.92C817.426 76.8 815.975 70.528 815.975 63.104V6.78399H827.623Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M898.254 51.328C898.254 42.624 900.217 34.816 904.142 27.904C908.067 20.9067 913.401 15.4453 920.142 11.52C926.969 7.59466 934.521 5.63199 942.798 5.63199C952.526 5.63199 961.017 7.97866 968.27 12.672C975.523 17.3653 980.814 24.0213 984.142 32.64H970.19C967.715 27.264 964.131 23.1253 959.438 20.224C954.83 17.3227 949.283 15.872 942.798 15.872C936.569 15.872 930.979 17.3227 926.03 20.224C921.081 23.1253 917.198 27.264 914.382 32.64C911.566 37.9307 910.158 44.16 910.158 51.328C910.158 58.4107 911.566 64.64 914.382 70.016C917.198 75.3067 921.081 79.4027 926.03 82.304C930.979 85.2053 936.569 86.656 942.798 86.656C949.283 86.656 954.83 85.248 959.438 82.432C964.131 79.5307 967.715 75.392 970.19 70.016H984.142C980.814 78.5493 975.523 85.1627 968.27 89.856C961.017 94.464 952.526 96.768 942.798 96.768C934.521 96.768 926.969 94.848 920.142 91.008C913.401 87.0827 908.067 81.664 904.142 74.752C900.217 67.84 898.254 60.032 898.254 51.328Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n          <path\n            d=\"M1070.22 6.78399V96H1058.57V55.552H1013.13V96H1001.48V6.78399H1013.13V45.952H1058.57V6.78399H1070.22Z\"\n            // stroke=\"hsl(184, 74%, 44%)\"\n            stroke=\"url(#linear)\"\n            stroke-width=\"5\"\n            mask=\"url(#path-1-outside-1_2_5)\"\n          />\n        </g>\n      </svg>\n    </StyledDiv>\n  )\n}\n","import React, { useRef, useEffect } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport DorianDeptuch from \"./DorianDeptuch\"\nimport { device } from \"../config/config\"\n\nconst fadeInAnimation = keyframes`\n    from {\n        opacity: 0;\n        transform: translate(-50%, -70%);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(-50%, -50%);\n    }\n\n`\n\nconst StyledHeading = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  background: red;\n  transform: translate(-50%, -50%);\n  background: inherit;\n  padding: 3rem 5rem;\n  background-color: rgba(255, 255, 255, 0.35);\n  backdrop-filter: blur(20px);\n  ${\"\" /* color: black; */}\n  border-radius: 5px;\n  width: 70%;\n  font-size: 2rem;\n  animation: ${fadeInAnimation} 2s forwards ease;\n\n  h1,\n  h5 {\n    color: black;\n  }\n\n  h5 {\n    margin: 0;\n  }\n\n  ${\n    \"\" /* &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    box-shadow: inset 0 0 2000px rgba(255, 255, 255, 0.5);\n    filter: blur(10px);\n    background: inherit;\n  } */\n  }\n\n  @media only screen and ${device.tablet} {\n    padding: 2rem 3.5rem;\n\n    h1 {\n      font-size: 0.8em;\n    }\n    h5 {\n      font-size: 0.6em;\n    }\n  }\n  @media only screen and ${device.mobile} {\n    padding: 1rem 2rem;\n\n    h1 {\n      font-size: 0.5em;\n      color: ;\n    }\n    h5 {\n      font-size: 0.3em;\n    }\n  }\n  @media only screen and (max-width: 600px) {\n    padding: 1rem 2rem;\n\n    h1 {\n      font-size: 0.5em;\n      color: ;\n    }\n    h5 {\n      font-size: 0.3em;\n    }\n  }\n`\n\nexport default function HeroHeading() {\n  const headingRef = useRef(null)\n\n  useEffect(() => {\n    headingRef.current.scrollIntoView({\n      behavior: \"auto\",\n      block: \"center\",\n      inline: \"center\",\n    })\n  }, [])\n  return (\n    <StyledHeading ref={headingRef}>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <h1\n          className=\"title\"\n          style={{ display: \"inline-block\", position: \"relative\" }}\n        >\n          Hello, I'm\n        </h1>\n        <div style={{ width: \"100%\" }}>\n          <DorianDeptuch />\n        </div>\n        <h5>\n          Fullstack Software Engineer. <wbr /> Based in San Diego, CA.\n        </h5>\n      </div>\n    </StyledHeading>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport HeroSVG from \"./HeroSVG\"\nimport HeroHeading from \"./HeroHeading\"\n\nconst StyledSection = styled.section`\n  position: relative;\n  margin: 0 auto;\n  .title {\n    margin-bottom: 0;\n  }\n  .subtitle {\n    margin-top: 0;\n  }\n  .highlighted {\n    box-shadow: inset 0 -2.5rem 0 #cdf3e1;\n  }\n`\n\nconst Hero = () => {\n  return (\n    <StyledSection id=\"hero\">\n      <HeroSVG />\n      <HeroHeading />\n    </StyledSection>\n  )\n}\n\nexport default Hero\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import React from \"react\"\nimport styled, { keyframes } from \"styled-components/\"\n\nconst waveAnimation = keyframes`\nto {\n    transform: translateX(-100%) scaleX(2)\n\n}\n`\n\nconst StyledDiv = styled.div`\n  width: 200%;\n  display: flex;\n  flex-direction: row;\n  z-index: -1;\n\n  svg {\n    display: block;\n    transform: scaleX(2);\n    animation: ${waveAnimation} 10s linear infinite;\n  }\n`\n\nexport default function WaveSVG({ bg }) {\n  return (\n    <StyledDiv>\n      <svg\n        viewBox=\"0 0 1440 310\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M113.601 29.0651C58.7697 29.9319 55.9168 0.355823 1.07243 0.00328444C-181.341 -1.16926 1.07243 312 1.07243 312L1440.44 312C1440.44 312 1479.95 0.00331455 1440.44 0.00330292C1400.93 0.00329129 1407.93 29.0651 1337.91 29.0651C1267.9 29.0651 1263.89 0.00330292 1214.38 0.00330292C1164.87 0.00330292 1167.37 29.0651 1100.85 29.0651C1011.83 29.0651 1003.83 0.00330292 947.814 0.00330292C891.8 0.00330292 891.8 29.0651 828.784 29.0651C765.768 29.0651 761.267 0.00330292 694.249 0.00330292C627.232 0.00330292 628.733 29.0651 580.72 29.0651C532.708 29.0651 529.707 0.00332796 455.689 0.00330292C381.67 0.00327788 383.17 29.0651 333.657 29.0651C284.145 29.0651 287.646 0.00330292 227.13 0.00330292C166.615 0.00330292 164.734 28.2568 113.601 29.0651Z\"\n          fill={bg}\n          fill-opacity=\"0.05\"\n        />\n        <path\n          d=\"M113.601 54.4567C58.7697 55.2457 55.9168 28.3239 1.07243 28.003C-181.341 26.9357 1.07243 312 1.07243 312H1440.44C1440.44 312 1479.95 28.003 1440.44 28.003C1400.93 28.003 1407.93 54.4567 1337.91 54.4567C1267.9 54.4567 1263.89 28.003 1214.38 28.003C1164.87 28.003 1167.37 54.4567 1100.85 54.4567C1011.83 54.4567 1003.83 28.003 947.814 28.003C891.8 28.003 891.8 54.4567 828.784 54.4567C765.768 54.4567 761.267 28.003 694.249 28.003C627.232 28.003 628.733 54.4567 580.72 54.4567C532.708 54.4567 529.707 28.003 455.689 28.003C381.67 28.003 383.17 54.4567 333.657 54.4567C284.145 54.4567 287.646 28.003 227.13 28.003C166.615 28.003 164.734 53.7209 113.601 54.4567Z\"\n          fill={bg}\n          fill-opacity=\"0.19\"\n        />\n        <path\n          d=\"M113.601 84.3825C58.7697 85.0798 55.9168 61.2863 1.07243 61.0026C-181.341 60.0593 1.07243 312 1.07243 312L1440.44 312C1440.44 312 1479.95 61.0027 1440.44 61.0027C1400.93 61.0026 1407.93 84.3825 1337.91 84.3825C1267.9 84.3825 1263.89 61.0027 1214.38 61.0027C1164.87 61.0027 1167.37 84.3825 1100.85 84.3825C1011.83 84.3825 1003.83 61.0027 947.814 61.0027C891.8 61.0027 891.8 84.3825 828.784 84.3825C765.768 84.3825 761.267 61.0027 694.249 61.0027C627.232 61.0027 628.733 84.3825 580.72 84.3825C532.708 84.3825 529.707 61.0027 455.689 61.0027C381.67 61.0026 383.17 84.3825 333.657 84.3825C284.145 84.3825 287.646 61.0027 227.13 61.0027C166.615 61.0027 164.734 83.7322 113.601 84.3825Z\"\n          fill={bg}\n          fill-opacity=\"0.32\"\n        />\n        <path\n          d=\"M113.601 112.495C58.7697 113.106 55.9168 92.2509 1.07243 92.0023C-181.341 91.1755 1.07243 312 1.07243 312L1440.44 312C1440.44 312 1479.95 92.0023 1440.44 92.0023C1400.93 92.0023 1407.93 112.495 1337.91 112.495C1267.9 112.495 1263.89 92.0023 1214.38 92.0023C1164.87 92.0023 1167.37 112.495 1100.85 112.495C1011.83 112.495 1003.83 92.0023 947.814 92.0023C891.8 92.0023 891.8 112.495 828.784 112.495C765.768 112.495 761.267 92.0023 694.249 92.0023C627.232 92.0023 628.733 112.495 580.72 112.495C532.708 112.495 529.707 92.0023 455.689 92.0023C381.67 92.0023 383.17 112.495 333.657 112.495C284.145 112.495 287.646 92.0023 227.13 92.0023C166.615 92.0023 164.734 111.925 113.601 112.495Z\"\n          fill={bg}\n          fill-opacity=\"0.46\"\n        />\n        <path\n          d=\"M113.601 138.607C58.7697 139.132 55.9168 121.216 1.07243 121.002C-181.341 120.292 1.07243 310 1.07243 310L1440.44 310C1440.44 310 1479.95 121.002 1440.44 121.002C1400.93 121.002 1407.93 138.607 1337.91 138.607C1267.9 138.607 1263.89 121.002 1214.38 121.002C1164.87 121.002 1167.37 138.607 1100.85 138.607C1011.83 138.607 1003.83 121.002 947.814 121.002C891.8 121.002 891.8 138.607 828.784 138.607C765.768 138.607 761.267 121.002 694.249 121.002C627.232 121.002 628.733 138.607 580.72 138.607C532.708 138.607 529.707 121.002 455.689 121.002C381.67 121.002 383.17 138.607 333.657 138.607C284.145 138.607 287.646 121.002 227.13 121.002C166.615 121.002 164.734 138.117 113.601 138.607Z\"\n          fill={bg}\n          fill-opacity=\"0.59\"\n        />\n        <path\n          d=\"M113.601 169.626C58.7697 170.062 55.9168 155.179 1.07243 155.002C-181.341 154.412 1.07243 312 1.07243 312H1440.44C1440.44 312 1479.95 155.002 1440.44 155.002C1400.93 155.002 1407.93 169.626 1337.91 169.626C1267.9 169.626 1263.89 155.002 1214.38 155.002C1164.87 155.002 1167.37 169.626 1100.85 169.626C1011.83 169.626 1003.83 155.002 947.814 155.002C891.8 155.002 891.8 169.626 828.784 169.626C765.768 169.626 761.267 155.002 694.249 155.002C627.232 155.002 628.733 169.626 580.72 169.626C532.708 169.626 529.707 155.002 455.689 155.002C381.67 155.002 383.17 169.626 333.657 169.626C284.145 169.626 287.646 155.002 227.13 155.002C166.615 155.002 164.734 169.219 113.601 169.626Z\"\n          fill={bg}\n          fill-opacity=\"0.73\"\n        />\n        <path\n          d=\"M113.601 195.017C58.7697 195.376 55.9168 183.147 1.07243 183.001C-181.341 182.517 1.07243 312 1.07243 312L1440.44 312C1440.44 312 1479.95 183.001 1440.44 183.001C1400.93 183.001 1407.93 195.017 1337.91 195.017C1267.9 195.017 1263.89 183.001 1214.38 183.001C1164.87 183.001 1167.37 195.017 1100.85 195.017C1011.83 195.017 1003.83 183.001 947.814 183.001C891.8 183.001 891.8 195.017 828.784 195.017C765.768 195.017 761.267 183.001 694.249 183.001C627.232 183.001 628.733 195.017 580.72 195.017C532.708 195.017 529.707 183.001 455.689 183.001C381.67 183.001 383.17 195.017 333.657 195.017C284.145 195.017 287.646 183.001 227.13 183.001C166.615 183.001 164.734 194.683 113.601 195.017Z\"\n          fill={bg}\n          fill-opacity=\"0.86\"\n        />\n        <path\n          d=\"M125.601 213.154C70.7697 213.457 67.9168 203.124 13.0724 203.001C-169.341 202.592 13.0724 312 13.0724 312L1452.44 312C1452.44 312 1491.95 203.001 1452.44 203.001C1412.93 203.001 1419.93 213.154 1349.91 213.154C1279.9 213.154 1275.89 203.001 1226.38 203.001C1176.87 203.001 1179.37 213.154 1112.85 213.154C1023.83 213.154 1015.83 203.001 959.814 203.001C903.8 203.001 903.8 213.154 840.784 213.154C777.768 213.154 773.267 203.001 706.249 203.001C639.232 203.001 640.733 213.154 592.72 213.154C544.708 213.154 541.707 203.001 467.689 203.001C393.67 203.001 395.17 213.154 345.657 213.154C296.145 213.154 299.646 203.001 239.13 203.001C178.615 203.001 176.734 212.872 125.601 213.154Z\"\n          fill={bg}\n        />\n      </svg>\n    </StyledDiv>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { device } from \"../config/config\"\n\nconst StyledContainer = styled.div`\n  @import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap\");\n  font-family: \"Poppins\", sans-serif;\n\n  h3 {\n    color: hsl(184, 74%, 44%);\n    font-size: 2rem;\n    text-align: center;\n  }\n\n  @media only screen and ${device.tablet} {\n    h3 {\n      font-size: 1.5rem;\n      margin: 1rem 0;\n    }\n    p {\n      margin-bottom: 0;\n    }\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: \"100px\"\n  width: 80%;\n  background: #07093e;\n  margin: 0 auto;\n  overflow-x: hidden;\n\n  .mernContainer {\n    position: relative;\n    width: 100%;\n    overflow-x: hidden;\n  }\n\n  .mernContainer.mernContainer::after {\n  content: '';\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 150px;\n  height: calc(100% - 20px);\n  right: 0;\n  position: absolute;\n  z-index: 9999999;\n  margin-left: auto;\n  top: 0;\n  background: linear-gradient(to right, #07093e00 0, #07093eB3 40%, #07093e 70%);\n}\n  .mernContainer.mernContainer::before {\n  content: '';\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 150px;\n  height: calc(100% - 20px);\n  left: 0;\n  position: absolute;\n  z-index: 9999999;\n  margin-left: auto;\n  top: 0;\n  background: linear-gradient(to left, #07093e00 0, #07093eB3 40%, #07093e 70%);\n}\n\n.mern {\n  display: block;\n  width: 100%;\n  transform: translateX(100%); \n  animation: move 20s linear infinite\n}\n\n/* Create the animation */\n@keyframes move {\n  to {\n    transform: translateX(-205%);\n  }\n}\n@keyframes moveTablet {\n  to {\n    transform: translateX(-100%);\n  }\n}\n@keyframes moveMobile {\n  to {\n    transform: translateX(-75%);\n  }\n}\n\nsvg { \n  width: 60%;\n}\n\n  svg,\n  div {\n    margin: 0 auto;\n  }\n\n  p {\n    font-size: 3rem;\n    text-overflow: clip;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n\n  svg,\n  path {\n    fill: hsl(184, 74%, 44%);\n  }\n\n  @media only screen and ${device.tablet} {\n    width: 100%;\n    margin: 0;\n\n    .mern {\n    transform: translateX(75%); \n    animation: moveTablet 20s linear infinite\n  }\n\n    ${\n      \"\" /* .mernContainer.mernContainer::after,\n    .mernContainer.mernContainer::before {\n      width: 75px;\n    } */\n    }\n\n    p {\n      font-size: 2rem;\n    }\n  }\n\n  @media only screen and (max-width: 600px) {\n    width: 100%;\n\n    .mern {\n      transform: translateX(100%); \n      animation: moveMobile 20s linear infinite;\n    }\n\n    svg {\n      width: 50%;\n    }\n  }\n`\n\nexport default function Skills() {\n  return (\n    <StyledContainer>\n      <h3>My Skills</h3>\n      <StyledDiv>\n        {(\n          <svg\n            viewBox=\"0 0 640 245\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M37.4838 1.60534C37.4838 2.50534 34.0898 6.61434 29.9408 10.7363C25.7928 14.8573 20.3828 21.0543 17.9198 24.5053C5.0828 42.4953 -2.0212 69.4863 0.506804 90.6623C2.9678 111.276 11.0828 126.907 27.7528 143.141L36.6588 151.814L37.5968 159.641C38.6468 168.391 39.2178 170.568 40.2028 169.582C41.0598 168.725 41.4828 166.693 42.0998 160.468C42.9388 151.995 43.1658 151.602 52.8048 141.902C63.6698 130.969 69.8768 121.15 74.1358 108.156C76.8008 100.028 76.9838 98.4053 76.9838 82.9683C76.9838 67.0683 76.8668 66.1153 73.7678 56.7573C68.1758 39.8733 61.2918 28.1343 49.5628 15.4843C45.9378 11.5743 42.1178 6.48334 41.0758 4.17134C39.1348 -0.132661 37.4838 -1.31266 37.4838 1.60534ZM184.292 16.5153C166.131 20.9193 149.309 34.4873 140.957 51.4683C136.216 61.1083 134.484 68.7273 134.484 79.9483C134.484 98.6163 140.288 112.038 154.383 125.968C160.971 132.478 164.818 135.361 170.817 138.282C189.185 147.226 210.612 147.212 229.417 138.244C242.265 132.117 253.189 121.424 259.337 108.956C275.752 75.6663 262.265 37.2543 228.403 20.8513C216.799 15.2303 197.439 13.3273 184.292 16.5153ZM396.327 19.3593C391.542 20.6463 380.102 27.5223 376.948 31.0083C374.423 33.7983 372.836 33.4823 367.076 29.0433C357.984 22.0353 351.045 18.9683 344.282 18.9683C338.826 18.9683 337.985 19.2673 334.974 22.2783C329.66 27.5923 327.844 38.3213 329.848 52.5513L330.705 58.6343L327.344 59.8663C314.115 64.7173 303.874 72.5323 301.772 79.3803C298.892 88.7643 307.401 98.4293 324.331 105.003L330.678 107.468L329.87 114.468C328.14 129.437 329.903 139.372 335.097 143.933C339.41 147.72 342.777 148.574 347.925 147.187C355.567 145.127 360.363 142.578 367.618 136.718C370.172 134.656 372.732 132.968 373.307 132.968C373.882 132.968 377.593 135.406 381.555 138.387C390.894 145.412 400.687 148.823 406.511 147.078C414.512 144.681 418.205 135.648 417.123 121.125C416.767 116.364 416.201 111.231 415.864 109.718C415.389 107.588 415.62 106.968 416.888 106.968C419.999 106.968 435.125 98.8883 438.948 95.1843C445.143 89.1823 446.979 82.7233 444.069 77.1683C440.907 71.1323 430.667 63.8503 420.673 60.5313L415.438 58.7923L416.211 53.6303C416.636 50.7913 416.981 44.6433 416.977 39.9683C416.966 26.8163 412.95 19.9633 404.484 18.6503C402.559 18.3513 398.889 18.6703 396.327 19.3593ZM356.657 30.3013C359.587 32.2233 363.29 34.8813 364.886 36.2093L367.789 38.6233L362.44 45.5453C359.498 49.3533 357.029 52.5813 356.952 52.7203C356.664 53.2423 338.311 56.1283 337.899 55.7163C337.662 55.4793 337.011 51.6473 336.454 47.2013C335.354 38.4323 336.125 32.6903 338.99 28.3193C340.569 25.9083 341.102 25.7523 346.014 26.2593C349.775 26.6473 352.887 27.8293 356.657 30.3013ZM406.832 27.4593C409.721 30.3483 410.779 35.9883 410.176 45.2913C409.857 50.2223 409.189 54.6633 408.692 55.1603C408.155 55.6973 404.182 55.4033 398.881 54.4333L389.972 52.8033L384.728 46.3963C381.844 42.8723 379.484 39.5693 379.484 39.0563C379.484 37.4953 387.539 31.1203 392.861 28.4673C398.494 25.6603 404.593 25.2203 406.832 27.4593ZM582.484 50.3013C582.484 57.0853 582.202 62.9173 581.857 63.2613C581.512 63.6063 580.021 63.2633 578.542 62.4983C576.008 61.1883 575.323 61.4073 566.671 66.2883L557.489 71.4683L557.487 82.1433L557.484 92.8183L566.353 97.8933C571.23 100.684 575.717 102.968 576.322 102.968C576.927 102.968 581.261 100.701 585.953 97.9293L594.484 92.8913V68.0883V43.2863L589.599 40.6273C586.912 39.1653 584.212 37.9683 583.599 37.9683C582.839 37.9683 582.484 41.9003 582.484 50.3013ZM376.679 47.6553C381.032 51.8253 380.38 52.9683 373.651 52.9683C370.442 52.9683 367.537 52.6873 367.194 52.3453C366.389 51.5393 371.381 44.9683 372.798 44.9683C373.39 44.9683 375.137 46.1773 376.679 47.6553ZM187.178 58.5413C191.795 62.1973 196.254 70.8503 196.675 76.9683L196.984 81.4683L178.734 81.7413C160.604 82.0113 160.484 82.0283 160.506 84.2413C160.55 88.6653 164.093 94.5553 167.758 96.2943C174.944 99.7043 184.66 97.7453 187.575 92.2993C188.546 90.4843 189.665 89.9683 192.628 89.9683C196.273 89.9683 196.394 90.0743 195.486 92.4623C192.557 100.168 184.883 104.975 175.538 104.958C161.509 104.934 152.484 95.1513 152.484 79.9683C152.484 69.0973 156.556 61.6293 164.741 57.4873C169.188 55.2383 171 54.8873 176.678 55.1813C182.322 55.4733 183.968 55.9993 187.178 58.5413ZM217.175 63.4433C220.37 68.1043 223.209 71.9213 223.484 71.9263C223.759 71.9303 226.684 68.1293 229.984 63.4783L235.984 55.0233L240.793 54.9953C246.395 54.9633 246.726 53.9603 236.783 67.1513C232.769 72.4763 229.484 77.3603 229.484 78.0043C229.484 78.6493 233.534 84.7073 238.484 91.4683C243.434 98.2293 247.484 104.032 247.484 104.364C247.484 104.696 245.316 104.968 242.666 104.968H237.847L231.083 94.9683C227.362 89.4683 223.974 84.9683 223.553 84.9683C223.133 84.9683 219.793 89.4683 216.131 94.9683L209.473 104.968H204.356C200.397 104.968 199.465 104.685 200.237 103.718C200.785 103.031 205.112 97.1333 209.852 90.6123L218.47 78.7563L216.261 75.6123C215.046 73.8833 211.225 68.7433 207.768 64.1903C204.312 59.6373 201.484 55.6993 201.484 55.4403C201.484 55.1803 203.707 54.9683 206.425 54.9683H211.365L217.175 63.4433ZM379.484 59.9683C377.436 60.6243 377.83 60.7873 381.666 60.8683C385.688 60.9543 386.654 61.3983 388.519 64.0173C392.118 69.0713 398.484 81.1323 398.484 82.8963C398.484 84.9953 392.965 95.5083 388.755 101.427L385.525 105.968H372.992H360.459L357.107 100.718C355.263 97.8303 352.35 92.6823 350.634 89.2763L347.514 83.0843L350.364 77.0583C351.932 73.7433 353.5 71.3173 353.849 71.6663C354.198 72.0163 354.484 71.6413 354.484 70.8353C354.484 70.0283 355.71 67.4783 357.207 65.1683C359.789 61.1873 360.193 60.9633 364.957 60.8683C368.972 60.7893 369.481 60.6083 367.484 59.9683C365.816 59.4343 367.813 59.1673 373.484 59.1673C379.155 59.1673 381.152 59.4343 379.484 59.9683ZM350.317 61.8023C349.167 64.6813 343.882 73.9643 343.392 73.9663C342.799 73.9683 340.095 66.3463 340.023 64.4683C340.001 63.9183 342.009 62.9423 344.484 62.2983C350.153 60.8253 350.727 60.7763 350.317 61.8023ZM402.913 62.5213C407.036 63.2943 406.989 63.1303 404.867 69.3563L403.251 74.1013L399.867 68.4843C396.208 62.4103 395.673 60.4433 397.913 61.3023C398.699 61.6043 400.949 62.1523 402.913 62.5213ZM476.234 66.0733L467.484 71.1293V84.4903C467.484 91.8383 467.853 98.0783 468.304 98.3573C468.756 98.6363 471.568 97.3993 474.554 95.6083L479.984 92.3523L480.267 85.4103C480.578 77.8083 481.796 75.9683 486.52 75.9683C490.835 75.9683 492.484 78.7553 492.485 86.0473L492.486 92.4683L497.727 95.4683C500.609 97.1183 503.321 98.6223 503.754 98.8113C504.186 98.9993 504.415 92.7223 504.262 84.8623L503.984 70.5713L495.649 65.7703C491.065 63.1293 486.79 60.9793 486.149 60.9923C485.508 61.0063 481.047 63.2923 476.234 66.0733ZM521.702 66.1913L512.42 71.3653L512.702 81.9163L512.984 92.4683L521.484 97.6493C526.363 100.623 530.718 102.622 531.707 102.341C532.655 102.071 537.042 99.8043 541.457 97.3033L549.484 92.7553V82.1013V71.4473L540.52 66.2083C535.59 63.3263 531.427 60.9793 531.27 60.9923C531.113 61.0063 526.807 63.3453 521.702 66.1913ZM611.234 66.2613L602.484 71.4503V82.0923V92.7343L611.707 97.8783L620.931 103.021L626.433 100.069C629.459 98.4453 632.078 96.6863 632.254 96.1593C632.429 95.6333 628.728 93.0443 624.028 90.4063C615.872 85.8283 615.484 85.4533 615.484 82.1493C615.484 80.0263 616.16 78.1753 617.234 77.3603C621.049 74.4643 626.484 76.7613 626.484 81.2693C626.484 85.1813 627.784 85.2673 633.891 81.7593C639.101 78.7663 639.484 78.2923 639.484 74.8323C639.484 71.2083 639.271 70.9963 630.615 66.0433C625.738 63.2523 621.35 60.9913 620.865 61.0203C620.381 61.0493 616.047 63.4073 611.234 66.2613ZM166.76 63.9413C163.474 65.9453 160.014 72.3003 160.921 74.6653C161.298 75.6473 164.757 75.9683 174.953 75.9683C187.927 75.9683 188.484 75.8843 188.484 73.9183C188.484 64.6713 175.411 58.6673 166.76 63.9413ZM335.675 74.4683C337.293 78.8683 338.404 83.3683 338.143 84.4683C336.9 89.7103 333.001 99.2163 331.923 99.6303C330.305 100.251 318.456 94.8113 313.963 91.3843C311.985 89.8753 309.706 87.3643 308.899 85.8043C306.946 82.0263 308.672 78.6083 314.733 74.2563C319.867 70.5693 329.348 66.0253 331.358 66.2883C332.114 66.3873 334.057 70.0683 335.675 74.4683ZM419.58 67.5943C421.452 68.4893 424.932 70.1623 427.314 71.3113C432.041 73.5943 438.484 80.0593 438.484 82.5213C438.484 85.7583 435.386 89.8223 430.557 92.9213C426.015 95.8363 416.685 99.9683 414.645 99.9683C414.196 99.9683 412.396 96.2003 410.647 91.5943L407.466 83.2203L410.609 74.5943C412.337 69.8503 414.297 65.9683 414.964 65.9683C415.631 65.9683 417.708 66.7003 419.58 67.5943ZM366.754 70.4513C360.176 73.3103 357.551 82.5933 361.236 89.9673C364.51 96.5193 375.084 98.5553 381.831 93.9323C383.757 92.6123 385.135 91.2123 384.892 90.8193C384.65 90.4273 384.909 89.8243 385.468 89.4783C386.027 89.1333 386.484 86.2583 386.484 83.0893C386.484 78.1613 386.07 76.8643 383.616 74.1163C379.243 69.2173 372.808 67.8193 366.754 70.4513ZM578.841 77.0853C580.595 77.8843 581.407 79.1833 581.696 81.6543C582.031 84.5263 581.633 85.4383 579.326 87.0813C576.739 88.9233 576.349 88.9503 573.519 87.4863C570.942 86.1543 570.484 85.3393 570.484 82.0953C570.484 79.1203 570.982 78.0333 572.734 77.1883C575.67 75.7733 575.951 75.7683 578.841 77.0853ZM618.684 79.1683C616.845 81.0073 617.254 83.7753 619.548 85.0023C622.15 86.3953 624.484 84.7163 624.484 81.4533C624.484 78.3033 620.943 76.9093 618.684 79.1683ZM345.303 94.9223C346.022 96.5473 347.644 99.3993 348.907 101.26L351.204 104.644L346.094 103.718C343.283 103.208 340.821 102.631 340.621 102.434C340.043 101.863 342.613 91.9683 343.34 91.9683C343.701 91.9683 344.584 93.2973 345.303 94.9223ZM406.41 101.093C406.482 102.675 402.831 103.968 398.291 103.968C396.52 103.968 396.641 103.437 399.666 97.9323L402.984 91.8953L404.66 95.6823C405.582 97.7643 406.369 100.199 406.41 101.093ZM542.984 104.643C538.584 107.194 534.653 109.773 534.249 110.374C533.354 111.707 533.238 128.162 534.107 130.429C534.45 131.322 536.54 132.976 538.752 134.105C541.959 135.741 543.252 135.939 545.129 135.084C547.387 134.055 547.484 133.573 547.484 123.406C547.484 115.368 547.181 112.902 546.234 113.215C545.389 113.495 544.889 116.519 544.692 122.541C544.531 127.443 544.009 131.843 543.532 132.32C543.042 132.81 541.304 132.384 539.54 131.342L536.415 129.496L536.7 120.522L536.984 111.549L543.984 107.332C547.834 105.012 551.546 103.082 552.234 103.041C552.921 103.001 556.859 104.856 560.984 107.163L568.484 111.358V120.556V129.755L560.612 134.215C553.603 138.186 552.484 138.538 550.412 137.43C547.961 136.118 545.104 136.544 546.053 138.08C546.36 138.576 547.958 139.679 549.604 140.53C552.492 142.024 552.829 141.948 559.29 138.371C572.404 131.109 571.591 132.343 571.267 120.177L570.984 109.57L562.649 104.769C558.065 102.128 553.565 99.9763 552.649 99.9863C551.733 99.9963 547.384 102.091 542.984 104.643ZM574.866 109.52C575.207 110.41 575.039 110.811 574.473 110.461C572.872 109.472 573.342 111.606 575.034 113.01C576.312 114.07 576.863 114.017 578.171 112.71C580.196 110.684 579.187 107.968 576.408 107.968C574.887 107.968 574.442 108.416 574.866 109.52ZM349.203 111.517L355.423 112.219L361.654 119.752L367.885 127.285L363.819 130.876C355.663 138.081 344.168 142.611 340.907 139.904C336.696 136.409 334.974 125.728 336.829 114.609C337.595 110.015 337.785 109.778 340.312 110.282C341.781 110.575 345.783 111.131 349.203 111.517ZM409.608 113.48C410.847 119.269 410.515 131.958 409.032 135.506C406.53 141.496 401.618 141.868 391.725 136.818C386.973 134.393 379.484 128.315 379.484 126.885C379.484 126.374 382.055 122.809 385.198 118.962C390.272 112.752 391.308 111.962 394.448 111.91C396.393 111.879 399.784 111.476 401.984 111.015C407.799 109.797 408.896 110.152 409.608 113.48ZM552.822 112.92C549.458 114.349 548.779 117.979 551.468 120.156C552.699 121.153 554.744 121.968 556.013 121.968C559.36 121.968 561.484 122.98 561.484 124.575C561.484 126.52 554.114 126.432 552.484 124.468C550.763 122.394 549.484 122.592 549.484 124.933C549.484 127.551 552.391 128.968 557.763 128.968C560.766 128.968 562.702 128.384 563.829 127.139C567.294 123.311 564.902 120.249 557.484 119.016C555.319 118.656 553.984 117.868 553.984 116.951C553.984 114.898 558.848 114.496 560.442 116.417C561.795 118.047 564.484 118.541 564.484 117.159C564.484 113.63 557.298 111.019 552.822 112.92ZM380.479 113.968C380.477 114.243 378.839 116.248 376.841 118.424L373.208 122.381L369.861 118.424C368.02 116.248 366.507 114.243 366.499 113.968C366.491 113.693 369.634 113.468 373.484 113.468C377.334 113.468 380.482 113.693 380.479 113.968ZM4.1508 183.635C3.7838 184.001 3.4838 185.351 3.4838 186.635C3.4838 188.439 4.0348 188.968 5.9128 188.968C11.1798 188.968 11.4848 190.306 11.4688 213.289C11.4598 224.938 11.0478 235.108 10.5528 235.89C10.0578 236.672 8.1528 237.797 6.3188 238.39C4.0098 239.136 2.9838 240.083 2.9838 241.468C2.9838 243.344 3.7438 243.485 15.2338 243.749L27.4838 244.03V241.657C27.4838 239.756 26.6898 239.047 23.4838 238.086L19.4838 236.888L19.5188 221.678C19.5608 203.962 18.7048 203.455 29.6548 227.686C36.5608 242.969 38.6868 246.165 40.6428 244.209C41.0968 243.755 45.2558 234.931 49.8848 224.6C54.5148 214.269 58.5798 205.539 58.9188 205.2C59.2578 204.861 59.4108 211.982 59.2598 221.026L58.9838 237.468L55.1858 238.406C51.9608 239.203 51.4328 239.708 51.6858 241.751C51.9838 244.155 52.0068 244.159 65.7458 244.313C78.2688 244.454 79.5598 244.304 80.0868 242.643C80.7988 240.401 80.2158 239.768 76.1618 238.379L72.9838 237.291L72.7148 214.505C72.5328 199.123 72.8008 191.291 73.5378 190.403C74.1388 189.679 75.8348 188.948 77.3068 188.777C79.4128 188.534 79.9838 187.935 79.9838 185.968C79.9838 183.485 79.9158 183.466 69.8768 183.185L59.7708 182.901L55.2288 193.185C52.7308 198.84 48.7698 207.873 46.4248 213.258C44.0808 218.642 41.8418 222.692 41.4498 222.258C41.0578 221.823 37.2708 213.818 33.0348 204.468C22.4158 181.031 24.1648 182.968 13.6278 182.968C8.7818 182.968 4.5168 183.268 4.1508 183.635ZM348.846 184.468C347.963 186.769 349.202 188.968 351.381 188.968C356.143 188.968 356.485 190.638 356.469 213.789C356.46 225.713 356.123 235.974 355.719 236.592C355.315 237.211 353.522 238.034 351.734 238.422C348.595 239.103 347.907 240.3 349.006 243.164C349.412 244.223 352.447 244.498 362.756 244.408L375.984 244.293L376.3 241.631C376.544 239.581 376.185 238.968 374.742 238.968C370.735 238.968 369.669 236.836 369.126 227.739C368.84 222.939 368.96 218.792 369.392 218.525C370.393 217.906 373.406 221.223 382.057 232.466C392.102 245.522 391.308 244.968 399.984 244.968H407.484V242.046C407.484 239.648 406.9 238.919 404.234 237.988C401.187 236.924 395.53 230.835 388.199 220.728C385.421 216.898 385.354 214.968 388.001 214.968C390.662 214.968 397.273 207.612 397.975 203.868C399.657 194.903 394.049 187.126 384.024 184.518C375.658 182.342 349.676 182.305 348.846 184.468ZM520.846 184.468C519.986 186.709 521.182 188.968 523.23 188.968C524.225 188.968 526.039 189.669 527.261 190.525C529.438 192.049 529.484 192.514 529.484 213.09C529.484 225.352 529.063 234.887 528.472 235.991C527.915 237.031 525.866 238.181 523.918 238.546C521.036 239.087 520.433 239.607 520.68 241.339C520.971 243.376 521.504 243.468 532.984 243.468C544.131 243.468 544.984 243.332 544.984 241.557C544.984 240.264 543.852 239.266 541.484 238.469L537.984 237.292L537.71 220.63C537.559 211.466 537.821 203.968 538.291 203.968C538.762 203.968 546.488 213.193 555.46 224.468C568.39 240.717 572.261 244.968 574.128 244.968H576.484V219.05C576.484 204.795 576.752 192.432 577.081 191.577C577.409 190.722 579.233 189.73 581.135 189.374C584.15 188.808 584.554 188.388 584.289 186.096C583.986 183.488 583.911 183.466 574.484 183.175C562.454 182.804 560.484 183.27 560.484 186.487C560.484 188.447 560.994 188.968 562.913 188.968C567.816 188.968 568.484 190.954 568.484 205.539C568.484 212.925 568.091 218.968 567.611 218.968C567.131 218.968 560.944 211.659 553.861 202.726C546.779 193.792 540.196 185.692 539.234 184.726C536.861 182.343 521.743 182.131 520.846 184.468ZM179.484 186.905C179.484 189.487 179.876 189.879 182.734 190.155L185.984 190.468V214.468V238.468L182.734 238.781C179.876 239.057 179.484 239.449 179.484 242.031V244.968H204.302H229.121L231.657 235.99C233.052 231.051 233.959 226.776 233.672 226.49C233.385 226.203 231.93 225.968 230.439 225.968C228.389 225.968 227.433 226.676 226.525 228.869C223.895 235.218 221.349 236.435 209.906 236.809L199.484 237.15V227.059V216.968H207.362C215.77 216.968 216.823 217.488 218.012 222.224C218.564 224.425 219.273 224.968 221.592 224.968H224.484V212.968V200.968H221.592C219.273 200.968 218.564 201.511 218.012 203.712C216.823 208.452 215.772 208.968 207.323 208.968H199.406L199.695 200.218L199.984 191.468L205.984 191.151C209.284 190.977 213.946 191.125 216.345 191.479C220.271 192.06 220.86 192.515 222.247 196.046C223.409 199.004 224.345 199.968 226.057 199.968C228.187 199.968 228.346 199.505 228.655 192.38C228.836 188.207 228.796 184.607 228.567 184.38C228.338 184.153 217.201 183.968 203.817 183.968H179.484V186.905ZM380.046 192.564C384.699 194.772 386.459 201.877 383.299 205.696C381.597 207.753 374.625 210.918 371.734 210.946C369.549 210.967 369.484 210.678 369.484 200.968V190.968H373.083C375.062 190.968 378.196 191.686 380.046 192.564Z\"\n              fill=\"black\"\n            />\n          </svg>\n        ) || (\n          <div className=\"mernContainer\">\n            <p className=\"mern\">\n              M.E.R.N:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              MongoDB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              ExpressJS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              ReactJS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NodeJS{\" \"}\n            </p>\n          </div>\n        )}\n      </StyledDiv>\n    </StyledContainer>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst StyledDiv = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n\n  img {\n    aspect-ratio: 1 / 1;\n  }\n`\n\nexport default function Portrait() {\n  return (\n    <StyledDiv>\n      {/* <SquareSVG /> */}\n      <StaticImage\n        style={{ margin: \"2rem\", width: \"100%\" }}\n        src=\"https://res.cloudinary.com/dsykkv6uh/image/upload/v1675052198/Dorian-photo-new_vgd0mz.jpg\"\n        alt=\"Dorian Deptuch headshot\"\n      />\n    </StyledDiv>\n  )\n}\n","export default __webpack_public_path__ + \"static/Resume FS October 2023 (1)-a32f7b529a9989a3b0b43d81a0b952a3.pdf\";","import React, { useState } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport { device } from \"../config/config\"\nimport resume from \"../../static/Resume FS October 2023 (1).pdf\"\n\nconst FadeInAnimation = keyframes`\nfrom {\n    opacity: 0;\n}\nto {\n    opacity: 1;\n}\n`\n\nconst StyledButton = styled.button`\n  ${\"\" /* margin-bottom: 2rem; */}\n  background-color: hsl(184, 74%, 44%);\n  color: #07093f;\n  border: none;\n  border-radius: 5px;\n  padding: 1rem 2rem;\n  font-size: 1.5rem;\n  font-weight: bold;\n  cursor: pointer;\n  transition: opacity 0.25s, transform 0.25s;\n  transition-timing-function: cubic-bezier(0.75, -3, 0.25, 4);\n\n  &:hover {\n    cursor: pointer;\n    opacity: 70%;\n    transform: scale(1.03);\n  }\n\n  @media only screen and ${device.tablet} {\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n  }\n\n  @media only screen and ${device.mobile} {\n    font-size: 0.8rem;\n    padding: 0.35rem 0.75rem;\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n  margin-left: 2rem;\n  margin-right: 2rem;\n  color: hsl(184, 74%, 44%);\n`\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  animation: ${FadeInAnimation} 0.75s forwards linear;\n  margin-top: 2rem;\n\n  .fe {\n    margin-left: 2rem;\n    margin-right: 1rem;\n  }\n\n  .be {\n    margin-left: 1rem;\n    margin-right: 1rem;\n  }\n\n  .misc {\n    margin-left: 1rem;\n    margin-right: 2rem;\n  }\n  @media only screen and ${device.tablet} {\n    flex-direction: column;\n    align-items: center;\n    .fe,\n    .be,\n    .misc {\n      margin: 1rem;\n    }\n  }\n  ${\n    \"\" /* @media only screen and ${device.mobile} {\n    & > div {\n      margin: 0;\n    }\n  }  */\n  }\n`\n\nconst StyledListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  border: 2px solid hsl(184, 74%, 44%);\n  border-radius: 5px;\n  width: 100%;\n  max-width: 33%;\n\n  h4 {\n    font-size: 1.3rem;\n    text-align: center;\n  }\n  ul {\n    list-style: none;\n    margin-left: 0;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n  }\n\n  li {\n    text-align: center;\n    width: 20%;\n    margin: 1rem;\n\n    div {\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    }\n    p {\n      font-size: 0.75rem;\n      font-weight: 100;\n    }\n  }\n\n  svg,\n  path {\n    fill: hsl(184, 74%, 44%);\n    transition: opacity 0.5s ease, transform 0.5s ease;\n  }\n\n  svg:hover {\n    cursor: pointer;\n    opacity: 70%;\n    transform: scale(1.05);\n  }\n\n  @media only screen and ${device.latop} {\n    li {\n      width: 40%;\n    }\n  }\n  @media only screen and ${device.tablet} {\n    max-width: 100%;\n    width: 90%;\n    margin: 1rem;\n    li {\n      width: 10%;\n    }\n  }\n`\n\nconst StyledButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  ${\"\" /* gap: 5rem; */}\n`\n\nexport default function FullSkills() {\n  const [open, setOpen] = useState(false)\n\n  return (\n    <StyledDiv>\n      <StyledButtonContainer>\n        <StyledButton\n          onClick={() => {\n            setOpen(!open)\n          }}\n        >\n          {open ? \"Close\" : \"View Full List of Skills\"}\n        </StyledButton>\n        <a href={resume} target=\"_blank\" rel=\"noreferrer\">\n          <StyledButton>View Résumé</StyledButton>\n        </a>\n      </StyledButtonContainer>\n\n      {open && (\n        <StyledContainer>\n          <StyledListContainer className=\"fe\">\n            <h4>Front-End</h4>\n            <ul>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n                    <path d=\"M0 32l34.9 395.8L191.5 480l157.6-52.2L384 32H0zm308.2 127.9H124.4l4.1 49.4h175.6l-13.6 148.4-97.9 27v.3h-1.1l-98.7-27.3-6-75.8h47.7L138 320l53.5 14.5 53.7-14.5 6-62.2H84.3L71.5 112.2h241.1l-4.4 47.7z\" />\n                  </svg>\n                  <p>HTML5</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n                    <path d=\"M0 32l34.9 395.8L192 480l157.1-52.2L384 32H0zm313.1 80l-4.8 47.3L193 208.6l-.3.1h111.5l-12.8 146.6-98.2 28.7-98.8-29.2-6.4-73.9h48.9l3.2 38.3 52.6 13.3 54.7-15.4 3.7-61.6-166.3-.5v-.1l-.2.1-3.6-46.3L193.1 162l6.5-2.7H76.7L70.9 112h242.2z\" />\n                  </svg>\n                  <p>CSS3</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\">\n                    <path d=\"M301.84 378.92c-.3.6-.6 1.08 0 0zm249.13-87a131.16 131.16 0 0 0-58 13.5c-5.9-11.9-12-22.3-13-30.1-1.2-9.1-2.5-14.5-1.1-25.3s7.7-26.1 7.6-27.2-1.4-6.6-14.3-6.7-24 2.5-25.29 5.9a122.83 122.83 0 0 0-5.3 19.1c-2.3 11.7-25.79 53.5-39.09 75.3-4.4-8.5-8.1-16-8.9-22-1.2-9.1-2.5-14.5-1.1-25.3s7.7-26.1 7.6-27.2-1.4-6.6-14.29-6.7-24 2.5-25.3 5.9-2.7 11.4-5.3 19.1-33.89 77.3-42.08 95.4c-4.2 9.2-7.8 16.6-10.4 21.6-.4.8-.7 1.3-.9 1.7.3-.5.5-1 .5-.8-2.2 4.3-3.5 6.7-3.5 6.7v.1c-1.7 3.2-3.6 6.1-4.5 6.1-.6 0-1.9-8.4.3-19.9 4.7-24.2 15.8-61.8 15.7-63.1-.1-.7 2.1-7.2-7.3-10.7-9.1-3.3-12.4 2.2-13.2 2.2s-1.4 2-1.4 2 10.1-42.4-19.39-42.4c-18.4 0-44 20.2-56.58 38.5-7.9 4.3-25 13.6-43 23.5-6.9 3.8-14 7.7-20.7 11.4-.5-.5-.9-1-1.4-1.5-35.79-38.2-101.87-65.2-99.07-116.5 1-18.7 7.5-67.8 127.07-127.4 98-48.8 176.35-35.4 189.84-5.6 19.4 42.5-41.89 121.6-143.66 133-38.79 4.3-59.18-10.7-64.28-16.3-5.3-5.9-6.1-6.2-8.1-5.1-3.3 1.8-1.2 7 0 10.1 3 7.9 15.5 21.9 36.79 28.9 18.7 6.1 64.18 9.5 119.17-11.8 61.78-23.8 109.87-90.1 95.77-145.6C386.52 18.32 293-.18 204.57 31.22c-52.69 18.7-109.67 48.1-150.66 86.4-48.69 45.6-56.48 85.3-53.28 101.9 11.39 58.9 92.57 97.3 125.06 125.7-1.6.9-3.1 1.7-4.5 2.5-16.29 8.1-78.18 40.5-93.67 74.7-17.5 38.8 2.9 66.6 16.29 70.4 41.79 11.6 84.58-9.3 107.57-43.6s20.2-79.1 9.6-99.5c-.1-.3-.3-.5-.4-.8 4.2-2.5 8.5-5 12.8-7.5 8.29-4.9 16.39-9.4 23.49-13.3-4 10.8-6.9 23.8-8.4 42.6-1.8 22 7.3 50.5 19.1 61.7 5.2 4.9 11.49 5 15.39 5 13.8 0 20-11.4 26.89-25 8.5-16.6 16-35.9 16-35.9s-9.4 52.2 16.3 52.2c9.39 0 18.79-12.1 23-18.3v.1s.2-.4.7-1.2c1-1.5 1.5-2.4 1.5-2.4v-.3c3.8-6.5 12.1-21.4 24.59-46 16.2-31.8 31.69-71.5 31.69-71.5a201.24 201.24 0 0 0 6.2 25.8c2.8 9.5 8.7 19.9 13.4 30-3.8 5.2-6.1 8.2-6.1 8.2a.31.31 0 0 0 .1.2c-3 4-6.4 8.3-9.9 12.5-12.79 15.2-28 32.6-30 37.6-2.4 5.9-1.8 10.3 2.8 13.7 3.4 2.6 9.4 3 15.69 2.5 11.5-.8 19.6-3.6 23.5-5.4a82.2 82.2 0 0 0 20.19-10.6c12.5-9.2 20.1-22.4 19.4-39.8-.4-9.6-3.5-19.2-7.3-28.2 1.1-1.6 2.3-3.3 3.4-5C434.8 301.72 450.1 270 450.1 270a201.24 201.24 0 0 0 6.2 25.8c2.4 8.1 7.09 17 11.39 25.7-18.59 15.1-30.09 32.6-34.09 44.1-7.4 21.3-1.6 30.9 9.3 33.1 4.9 1 11.9-1.3 17.1-3.5a79.46 79.46 0 0 0 21.59-11.1c12.5-9.2 24.59-22.1 23.79-39.6-.3-7.9-2.5-15.8-5.4-23.4 15.7-6.6 36.09-10.2 62.09-7.2 55.68 6.5 66.58 41.3 64.48 55.8s-13.8 22.6-17.7 25-5.1 3.3-4.8 5.1c.5 2.6 2.3 2.5 5.6 1.9 4.6-.8 29.19-11.8 30.29-38.7 1.6-34-31.09-71.4-89-71.1zm-429.18 144.7c-18.39 20.1-44.19 27.7-55.28 21.3C54.61 451 59.31 421.42 82 400c13.8-13 31.59-25 43.39-32.4 2.7-1.6 6.6-4 11.4-6.9.8-.5 1.2-.7 1.2-.7.9-.6 1.9-1.1 2.9-1.7 8.29 30.4.3 57.2-19.1 78.3zm134.36-91.4c-6.4 15.7-19.89 55.7-28.09 53.6-7-1.8-11.3-32.3-1.4-62.3 5-15.1 15.6-33.1 21.9-40.1 10.09-11.3 21.19-14.9 23.79-10.4 3.5 5.9-12.2 49.4-16.2 59.2zm111 53c-2.7 1.4-5.2 2.3-6.4 1.6-.9-.5 1.1-2.4 1.1-2.4s13.9-14.9 19.4-21.7c3.2-4 6.9-8.7 10.89-13.9 0 .5.1 1 .1 1.6-.13 17.9-17.32 30-25.12 34.8zm85.58-19.5c-2-1.4-1.7-6.1 5-20.7 2.6-5.7 8.59-15.3 19-24.5a36.18 36.18 0 0 1 1.9 10.8c-.1 22.5-16.2 30.9-25.89 34.4z\" />\n                  </svg>\n                  <p>SCSS</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 719 433\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M347.399 1.22112C309.325 3.02415 276.332 13.1756 249.459 31.356C234.484 41.4865 219.864 55.9581 209.058 71.3487C197.346 88.0292 187.593 109.587 182.329 130.429C180.433 137.937 179.238 143.57 179.488 143.82C179.576 143.908 180.525 142.648 181.598 141.02C186.907 132.959 199.532 119.44 208.22 112.51C229.589 95.467 252.871 86.7169 277.142 86.6077C285.47 86.5702 290.513 87.143 297.974 88.9735C320.675 94.543 343.535 108.959 370.23 134.541C373.319 137.501 382.376 146.388 390.356 154.29C405.94 169.72 408.053 171.663 414.221 176.237C436.381 192.67 464.162 205.483 491.542 211.896C507.801 215.705 521.882 217.291 539.442 217.291C554.311 217.291 565.581 216.299 578.983 213.809C612.198 207.639 633.631 198.151 655.345 180.006C680.843 158.698 702.399 125.501 714.07 89.5669C716.124 83.2429 718.739 73.4072 718.445 73.1132C718.365 73.0326 716.853 74.8116 715.086 77.0663C703.919 91.3161 691.182 103.305 678.26 111.727C644.741 133.576 607.44 135.122 568.667 116.27C556.152 110.185 548.418 103.562 523.887 77.9209C501.689 54.7182 488.547 43.1479 472.069 32.2995C436.787 9.07129 396.053 -1.08326 347.399 1.22112ZM170.976 215.782C144.484 216.777 118.915 222.175 97.9124 231.207C78.7755 239.436 62.7858 250.229 48.4108 264.62C35.205 277.841 24.9798 292.346 16.5019 309.884C11.0695 321.121 6.90065 332.474 3.74096 344.633C2.15749 350.727 0.565995 358.189 0.799679 358.423C0.877191 358.501 1.90471 357.148 3.08268 355.417C12.8401 341.082 29.0884 325.893 44.2988 316.89C56.7104 309.543 68.9314 304.951 82.4053 302.572C89.0886 301.392 102.045 300.921 108.221 301.633C130.712 304.229 153.028 315.503 177.921 336.847C185.451 343.304 192.509 349.989 204.975 362.47C226.104 383.626 231.009 388.006 241.624 395.189C282.014 422.521 329.247 435.163 377.183 431.471C393.123 430.243 410.703 426.912 426.6 422.108C434.458 419.734 439.966 417.532 448.013 413.546C471.513 401.908 492.062 383.28 508.865 358.379C519.992 341.891 528.65 324.441 534.822 306.068C536.816 300.133 539.963 288.476 539.747 287.828C539.679 287.624 538.651 288.75 537.462 290.33C529.993 300.253 519.242 311.434 510.252 318.626C493.036 332.401 475.999 340.105 455.957 343.178C449.492 344.17 434.738 344.072 427.776 342.991C417.414 341.383 406.98 338.368 396.847 334.056C379.398 326.629 372.935 321.488 347.02 294.422C327.84 274.389 316.826 264.134 304.533 254.863C287.195 241.786 270.096 232.645 251.006 226.248C231.866 219.834 214.087 216.709 191.336 215.761C181.929 215.368 182.007 215.368 170.976 215.782Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Tailwind CSS</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 299 154\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M73.4207 2.56135C68.7187 7.63435 62.6877 29.2194 55.3587 67.2004L51.5577 86.9004L48.6467 84.4504L45.7357 82.0014L22.0617 82.0314C5.4227 82.0534 -1.08931 82.3664 0.146694 83.0864C1.11369 83.6494 2.42069 83.7904 3.05069 83.4014C3.71769 82.9894 3.92569 83.1314 3.54869 83.7424C3.19169 84.3194 3.55369 85.0424 4.35269 85.3494C6.88369 86.3204 12.7447 96.2254 15.3897 104.001C16.7927 108.126 19.0577 117.126 20.4227 124.001C23.7397 140.705 25.6857 147.245 27.0817 146.382C27.7837 145.948 27.9157 146.148 27.4387 146.921C26.9907 147.646 27.6127 149.143 28.9587 150.575L31.2377 153.001H53.9737H76.7107L79.2217 150.017C84.1767 144.129 88.4067 129.21 95.7737 91.6474L100.452 67.7924L105.622 93.6474C113.285 131.968 119.644 151.735 124.19 151.364C125.112 151.289 125.621 151.626 125.319 152.114C125.006 152.62 134.596 153.001 147.656 153.001C173.649 153.001 172.656 153.308 176.774 143.989C180.962 134.51 189.06 100.324 192.944 75.7264C193.619 71.4494 194.318 68.0974 194.497 68.2764C194.676 68.4554 196.425 77.1294 198.382 87.5514C205.704 126.534 213.513 151.736 218.157 151.364C219.098 151.289 219.621 151.626 219.319 152.114C219.006 152.62 228.638 153.001 241.757 153.001H264.743L267.807 149.285C271.888 144.333 274.621 135.662 275.931 123.501C278.557 99.1344 283.323 88.8894 294.367 83.8724L298.389 82.0454L274.484 82.0234L250.579 82.0014L246.977 85.7884L243.375 89.5754L239.003 66.5384C232.151 30.4334 225.226 5.05735 222.658 6.64435C221.994 7.05435 221.872 6.83835 222.339 6.08135C222.787 5.35635 222.165 3.85935 220.819 2.42735L218.54 0.00135431H194.286C167.44 0.00135431 168.598 -0.269646 164.964 6.85535C161.045 14.5404 153.28 45.7644 148.783 71.9214L147.508 79.3414L142.825 56.4214C135.723 21.6604 131.462 7.39335 126.647 2.25135C124.574 0.0373542 124.152 0.00135431 100.167 0.00135431H75.7937L73.4207 2.56135Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Materialize CSS</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n                    <path d=\"M333.5,201.4c0-22.1-15.6-34.3-43-34.3h-50.4v71.2h42.5C315.4,238.2,333.5,225,333.5,201.4z M517,188.6 c-9.5-30.9-10.9-68.8-9.8-98.1c1.1-30.5-22.7-58.5-54.7-58.5H123.7c-32.1,0-55.8,28.1-54.7,58.5c1,29.3-0.3,67.2-9.8,98.1 c-9.6,31-25.7,50.6-52.2,53.1v28.5c26.4,2.5,42.6,22.1,52.2,53.1c9.5,30.9,10.9,68.8,9.8,98.1c-1.1,30.5,22.7,58.5,54.7,58.5h328.7 c32.1,0,55.8-28.1,54.7-58.5c-1-29.3,0.3-67.2,9.8-98.1c9.6-31,25.7-50.6,52.1-53.1v-28.5C542.7,239.2,526.5,219.6,517,188.6z M300.2,375.1h-97.9V136.8h97.4c43.3,0,71.7,23.4,71.7,59.4c0,25.3-19.1,47.9-43.5,51.8v1.3c33.2,3.6,55.5,26.6,55.5,58.3 C383.4,349.7,352.1,375.1,300.2,375.1z M290.2,266.4h-50.1v78.4h52.3c34.2,0,52.3-13.7,52.3-39.5 C344.7,279.6,326.1,266.4,290.2,266.4z\" />\n                  </svg>\n                  <p>Boostrap</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 601 519\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M11.5 1.41703C7.36899 3.26103 3.15399 7.97702 1.97999 12.069C1.36099 14.228 0.999991 66.773 0.999991 154.776C0.999991 304.822 0.758994 297.858 6.12099 302.607C7.42999 303.765 21.291 311.978 36.925 320.857C63.546 335.975 65.679 337 70.527 337C76.248 337 80.736 334.632 84.408 329.677C86.482 326.879 86.504 326.124 87 243.177C87.491 161.029 87.538 159.436 89.554 156.003C93.928 148.557 103.62 145.717 111.3 149.631C113.06 150.528 136.093 163.675 162.484 178.845C207.938 204.974 210.735 206.429 215.515 206.429C220.297 206.429 223.085 204.978 268.531 178.836C294.914 163.66 317.94 150.514 319.7 149.622C327.013 145.916 336.884 148.89 340.882 156.004C342.955 159.693 342.999 160.736 342.96 205.636L342.92 251.5L282.21 286.255C248.82 305.37 220.037 321.901 218.25 322.99L215 324.971L215.006 369.735C215.009 396.028 215.417 415.963 215.996 418.044C216.537 419.994 218.447 422.979 220.24 424.677C224.154 428.386 376.67 515.806 382.75 517.825C386.404 519.039 387.596 519.04 391.25 517.831C396.155 516.209 592.299 403.888 595.879 400.651C601.159 395.877 601 398.981 601 300.482C601 222.031 600.79 208.495 599.536 206.069C596.13 199.484 587.112 195.043 580.734 196.811C577.391 197.738 523.965 228.013 520.609 230.883C519.569 231.772 517.891 234.3 516.881 236.5C515.177 240.211 515.041 244.184 515 291.5C514.959 339.436 514.842 342.752 513.054 346.689C511.878 349.279 509.691 351.793 507.326 353.272C505.222 354.589 478.525 370.026 448 387.577C393.506 418.91 392.4 419.488 387 419.476C381.732 419.463 380.283 418.768 352.641 402.981C334.12 392.404 323.061 385.488 321.769 383.674C317.032 377.026 317.702 368.02 323.34 362.56C325.078 360.877 348.495 346.9 375.378 331.5C417.611 307.307 424.612 302.966 426.878 299.573L429.5 295.646L429.786 156.073C429.995 53.972 429.766 15.385 428.933 12.346C426.176 2.29001 414.507 -2.85098 405.21 1.89302C403.17 2.93502 362.35 26.268 314.5 53.746C266.65 81.224 225.605 104.672 223.29 105.853C218.005 108.548 213.059 108.581 207.912 105.955C205.708 104.831 164.663 81.383 116.702 53.85C68.741 26.317 27.83 2.93702 25.79 1.89502C21.487 -0.302978 15.781 -0.492975 11.5 1.41703ZM576.5 2.67002C565.042 8.74002 522.188 35.393 520.851 37.28C519.944 38.561 518.709 41.384 518.107 43.554C516.632 48.864 516.626 107.082 518.099 112.5C520.146 120.028 526.738 125 534.673 125C539.065 125 541.662 123.673 567.269 108.339C582.573 99.175 596.18 90.387 597.507 88.809C598.834 87.232 600.186 84.492 600.512 82.721C600.837 80.949 600.967 64.12 600.801 45.322C600.512 12.456 600.42 11.035 598.408 8.32202C594.73 3.36002 590.247 0.996011 584.602 1.04001C581.796 1.06201 578.15 1.79502 576.5 2.67002Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Material UI</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 318 318\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M0 159V318H159H318V159V0H159H0V159ZM314 159V314H159H4V159V4H159H314V159ZM187.967 57.154C186.696 63.145 186.723 63.357 188.991 65.194C190.272 66.231 191.89 67.399 192.586 67.79C194.232 68.713 188.045 96.187 185.577 98.915C184.657 99.932 183.482 102.291 182.967 104.157C182.383 106.271 180.893 108.223 179.015 109.332L176 111.113V107.016C176 104.386 176.774 101.873 178.161 99.996C180.856 96.351 181.264 89.255 178.868 87.711C176.494 86.181 172.578 88.094 163.896 95.029C155.531 101.71 154.237 101.179 158.422 92.78C161.554 86.496 161.641 84.562 158.879 82.628C155.093 79.976 149.364 83.566 130.668 100.307C125.022 105.363 117.611 111.637 114.201 114.249C108.222 118.828 108 119.159 108 123.499C108 125.975 108.285 128 108.632 128C108.98 128 114.386 123.224 120.645 117.386C130.941 107.784 132.287 106.841 134.763 107.499C140.104 108.918 143.601 108.406 147.172 105.682C150.618 103.054 153.012 102.259 152.987 103.75C152.954 105.741 132.817 121.413 117.313 131.515L108.126 137.5L108.063 144.25C108.028 147.963 108.206 151 108.459 151C109.289 151 123.361 138.961 130.5 132.145C148.372 115.078 154.516 110.79 156.5 114C157.839 116.167 162.65 114.877 167.804 110.97C173.113 106.945 175.008 106.639 174.99 109.809C174.972 112.946 151.852 132.334 137.423 141.313C132.43 144.419 127.523 147.87 126.518 148.98C124.699 150.99 124.728 151 132.453 151H140.216L150.524 141.454L160.832 131.909L165.866 132.577C170.563 133.2 171.229 133.002 175.834 129.622C182.057 125.054 183.37 124.98 182.485 129.25C181.548 133.771 177.679 139.156 170.772 145.551C167.535 148.548 165.313 151 165.834 151C167.226 151 177.137 140.853 180.538 135.945C182.654 132.891 183.515 130.407 183.628 127.028C183.713 124.452 184.732 120.485 185.892 118.212C187.051 115.939 188 113.569 188 112.944C188 112.32 188.922 110.515 190.048 108.933C191.174 107.351 192.505 103.682 193.006 100.779C194.573 91.697 201.626 70.474 202.974 70.785C203.652 70.941 205.061 70.798 206.104 70.467C207.79 69.932 208 68.814 208 60.375V50.885L203.813 51.193L199.627 51.5L197.989 58.241C196.156 65.782 195.933 66.195 194.256 65.158C193.351 64.599 193.414 63.127 194.523 58.962C196.556 51.321 196.48 51 192.637 51C189.325 51 189.253 51.094 187.967 57.154ZM225.637 84.431C223.77 87.28 222.055 85.919 247.5 101.779C254.1 105.893 259.63 109.368 259.788 109.501C259.947 109.634 251.969 114.792 242.06 120.963L224.044 132.182L225.772 134.559C226.722 135.867 227.798 136.951 228.163 136.969C228.528 136.986 237.19 131.772 247.413 125.381L266 113.762L265.981 109.631L265.962 105.5L247.353 94C237.117 87.675 228.413 82.371 228.011 82.213C227.608 82.055 226.54 83.053 225.637 84.431ZM56.784 94.846L38.068 106.5L38.034 110.577L38 114.653L56.105 125.955C66.062 132.171 74.882 137.312 75.703 137.379C76.524 137.445 77.818 136.584 78.578 135.464C79.892 133.528 79.079 132.872 61.975 122.067L43.99 110.706L60.745 100.283C69.96 94.55 78.115 89.506 78.868 89.074C79.996 88.426 79.932 87.826 78.503 85.644C77.55 84.19 76.484 83.043 76.135 83.096C75.786 83.148 67.078 88.436 56.784 94.846ZM86 228.777C86 241.413 87.125 245 91.088 245C93.729 245 94.58 242.437 92.597 240.454C91.329 239.186 91 236.605 91 227.929V217H88.5H86V228.777ZM128 221.535C128 225.745 127.858 225.994 126.021 225.011C123.302 223.556 119.196 224.772 117.359 227.574C115.563 230.316 115.346 237.91 116.977 240.958C118.395 243.606 122.562 245.285 125.382 244.344C126.547 243.955 128.738 243.753 130.25 243.894L133 244.151V230.575V217H130.5C128.201 217 128 217.364 128 221.535ZM55 222.5C55 224.056 54.433 225 53.5 225C52.675 225 52 225.689 52 226.531C52 227.374 52.675 228.322 53.5 228.638C54.599 229.06 55 230.791 55 235.107C55 243.308 58.628 246.875 64.029 243.985C66.543 242.639 65.46 240 62.393 240C60.165 240 60 239.628 60 234.617C60 230.074 60.312 229.152 62 228.71C63.1 228.423 64 227.47 64 226.594C64 225.667 63.163 225 62 225C60.533 225 60 224.333 60 222.5C60 220.5 59.5 220 57.5 220C55.5 220 55 220.5 55 222.5ZM38.573 226.336C37.158 227.751 36 229.535 36 230.3C36 232.21 38.997 234.754 42.815 236.085C44.567 236.696 46 237.796 46 238.53C46 240.431 42.447 241.309 40.017 240.009C37.756 238.799 36 239.406 36 241.399C36 242.86 40.16 245 43 245C46.295 245 50.025 242.747 50.614 240.401C51.555 236.653 50.133 234.271 45.962 232.602C43.783 231.73 42 230.338 42 229.508C42 227.757 44.287 227.548 47.081 229.043C48.603 229.858 49.165 229.734 49.648 228.476C50.489 226.284 49.008 225.038 44.737 224.345C41.768 223.863 40.702 224.207 38.573 226.336ZM99.795 225.549C96.255 227.47 94.649 232.981 96.079 238.294C96.89 241.306 97.874 242.467 100.567 243.593C105.678 245.728 113.412 243.406 110.974 240.469C110.174 239.505 109.236 239.462 107.042 240.29C104.837 241.123 103.789 241.07 102.58 240.067C99.259 237.31 100.708 236 107.079 236H113.159L112.461 232.75C111.43 227.947 110.169 226.015 107.374 224.952C104.095 223.706 103.037 223.789 99.795 225.549ZM66.282 226.293C66.589 227.091 67.822 231.065 69.024 235.122C70.226 239.18 71.707 243.111 72.317 243.858C73.437 245.232 73.102 245.649 68.591 248.5C67.462 249.213 67.287 249.93 67.98 251C68.828 252.31 69.429 252.247 72.726 250.5C76.202 248.658 76.791 247.67 80.183 238C82.209 232.225 83.897 226.938 83.933 226.25C83.97 225.563 82.892 225 81.539 225C79.009 225 78.217 226.665 76.382 235.839C75.54 240.052 74.834 239.196 72.955 231.68C71.553 226.072 71.147 225.469 68.567 225.17C66.415 224.921 65.86 225.193 66.282 226.293ZM106.82 230.75C107.091 232.664 106.681 233 104.07 233C101.76 233 101 232.546 101 231.167C101 228.712 102.001 227.856 104.459 228.208C105.698 228.385 106.626 229.385 106.82 230.75ZM126.8 229.2C127.46 229.86 128 232.319 128 234.665C128 237.95 127.526 239.183 125.936 240.034C123.039 241.585 121 239.635 121 235.312C121 229.278 123.862 226.262 126.8 229.2ZM210 258.5C210 260.056 209.433 261 208.5 261C207.675 261 207 261.689 207 262.531C207 263.374 207.675 264.322 208.5 264.638C209.599 265.06 210 266.791 210 271.107C210 278.279 212.449 281.644 216.848 280.515C220.224 279.649 222.791 279.655 226.258 280.535C229.968 281.478 234.879 279.329 235.603 276.446C236.555 272.653 235.149 270.277 230.962 268.602C228.622 267.665 227 266.351 227 265.392C227 263.814 227.815 263.777 233 265.113C233.955 265.36 234.5 264.787 234.5 263.537C234.5 262.178 233.494 261.286 231.229 260.637C227.146 259.466 223.417 260.99 221.827 264.481C220.406 267.599 222.52 270.357 227.621 272.04C229.479 272.653 231 273.765 231 274.51C231 276.477 227.433 277.302 224.867 275.929C223.022 274.942 222.439 275.046 221.329 276.565C220.598 277.564 220 277.846 220 277.191C220 276.536 218.875 276 217.5 276C215.143 276 215 275.692 215 270.617C215 266.074 215.312 265.152 217 264.71C218.1 264.423 219 263.47 219 262.594C219 261.667 218.163 261 217 261C215.533 261 215 260.333 215 258.5C215 256.5 214.5 256 212.5 256C210.5 256 210 256.5 210 258.5ZM41.5 260.945C36.62 262.943 34.437 268.376 36.097 274.391C37.459 279.323 42.353 281.699 47.591 279.97C52.253 278.431 50.85 275.666 45.359 275.568L41.5 275.5L41.198 270.813C40.947 266.93 41.248 265.938 42.948 265.028C44.392 264.255 45.58 264.24 46.958 264.978C48.521 265.814 49.118 265.648 49.917 264.155C50.735 262.626 50.46 262.075 48.412 261.142C45.541 259.834 44.302 259.798 41.5 260.945ZM57.264 261.641C50.637 264.908 50.837 276.78 57.567 279.593C65.715 282.997 72.465 275.891 69.903 266.609C69.104 263.719 68.07 262.509 65.463 261.42C61.288 259.676 61.248 259.677 57.264 261.641ZM81.223 261.557C79.977 262.429 79 262.649 79 262.057C79 261.476 78.1 261 77 261C75.14 261 75 261.667 75 270.5C75 279.967 75.009 280 77.5 280C79.924 280 80 279.792 80 273.122C80 268.321 80.44 265.88 81.456 265.036C84.033 262.897 85 264.949 85 272.559C85 279.829 85.057 280 87.5 280C89.924 280 90 279.792 90 273.122C90 268.321 90.44 265.88 91.456 265.036C94.033 262.897 95 264.949 95 272.559C95 279.829 95.057 280 97.5 280C99.967 280 100 279.89 100 271.655C100 264.84 99.665 263.006 98.171 261.655C95.936 259.632 93.987 259.558 91.468 261.4C89.826 262.6 89.267 262.6 87.554 261.4C85.003 259.614 83.96 259.639 81.223 261.557ZM111.223 261.557C109.977 262.429 109 262.649 109 262.057C109 261.476 108.1 261 107 261C105.098 261 105 261.667 105 274.57C105 288.07 105.012 288.137 107.25 287.82C109.066 287.562 109.561 286.763 109.814 283.685C110.112 280.068 110.275 279.902 112.946 280.488C115.048 280.95 116.445 280.521 118.444 278.802C123.517 274.438 122.773 263.005 117.279 260.916C114.1 259.707 113.82 259.737 111.223 261.557ZM130.264 261.641C123.637 264.908 123.837 276.78 130.567 279.593C138.715 282.997 145.465 275.891 142.903 266.609C142.104 263.719 141.07 262.509 138.463 261.42C134.288 259.676 134.248 259.677 130.264 261.641ZM154.223 261.557C152.977 262.429 152 262.649 152 262.057C152 261.476 151.1 261 150 261C148.14 261 148 261.667 148 270.5C148 279.967 148.009 280 150.5 280C152.922 280 153 279.787 153 273.2C153 266.506 154.008 264 156.7 264C157.658 264 158 266.103 158 272V280H161H164V273.565C164 261.791 160.328 257.28 154.223 261.557ZM171.795 261.549C168.255 263.47 166.649 268.981 168.079 274.294C168.89 277.306 169.874 278.467 172.567 279.593C177.678 281.728 185.412 279.406 182.974 276.469C182.174 275.505 181.236 275.462 179.042 276.29C176.837 277.123 175.789 277.07 174.58 276.067C171.259 273.31 172.708 272 179.079 272H185.159L184.461 268.75C183.43 263.947 182.169 262.015 179.374 260.952C176.095 259.706 175.037 259.789 171.795 261.549ZM195.223 261.557C193.977 262.429 193 262.649 193 262.057C193 261.476 192.1 261 191 261C189.14 261 189 261.667 189 270.5C189 279.967 189.009 280 191.5 280C193.922 280 194 279.787 194 273.2C194 266.506 195.008 264 197.7 264C198.658 264 199 266.103 199 272V280H202H205V273.565C205 261.791 201.328 257.28 195.223 261.557ZM63.939 265.426C65.636 267.471 64.867 275.066 62.834 276.34C60.159 278.016 58 275.442 58 270.578C58 264.754 61.129 262.04 63.939 265.426ZM116.146 267.454C117.562 272.749 115.052 277.725 111.627 276.41C109.637 275.647 109.334 267.066 111.229 265.171C113.159 263.241 115.283 264.228 116.146 267.454ZM136.939 265.426C138.636 267.471 137.867 275.066 135.834 276.34C133.159 278.016 131 275.442 131 270.578C131 264.754 134.129 262.04 136.939 265.426ZM178.82 266.75C179.091 268.664 178.681 269 176.07 269C173.76 269 173 268.546 173 267.167C173 264.712 174.001 263.856 176.459 264.208C177.698 264.385 178.626 265.385 178.82 266.75Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Styled Components</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                    <path d=\"M0 32v448h448V32H0zm243.8 349.4c0 43.6-25.6 63.5-62.9 63.5-33.7 0-53.2-17.4-63.2-38.5l34.3-20.7c6.6 11.7 12.6 21.6 27.1 21.6 13.8 0 22.6-5.4 22.6-26.5V237.7h42.1v143.7zm99.6 63.5c-39.1 0-64.4-18.6-76.7-43l34.3-19.8c9 14.7 20.8 25.6 41.5 25.6 17.4 0 28.6-8.7 28.6-20.8 0-14.4-11.4-19.5-30.7-28l-10.5-4.5c-30.4-12.9-50.5-29.2-50.5-63.5 0-31.6 24.1-55.6 61.6-55.6 26.8 0 46 9.3 59.8 33.7L368 290c-7.2-12.9-15-18-27.1-18-12.3 0-20.1 7.8-20.1 18 0 12.6 7.8 17.7 25.9 25.6l10.5 4.5c35.8 15.3 55.9 31 55.9 66.2 0 37.8-29.8 58.6-69.7 58.6z\" />\n                  </svg>\n                  <p>Javascript</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path d=\"M418.2 177.2c-5.4-1.8-10.8-3.5-16.2-5.1.9-3.7 1.7-7.4 2.5-11.1 12.3-59.6 4.2-107.5-23.1-123.3-26.3-15.1-69.2.6-112.6 38.4-4.3 3.7-8.5 7.6-12.5 11.5-2.7-2.6-5.5-5.2-8.3-7.7-45.5-40.4-91.1-57.4-118.4-41.5-26.2 15.2-34 60.3-23 116.7 1.1 5.6 2.3 11.1 3.7 16.7-6.4 1.8-12.7 3.8-18.6 5.9C38.3 196.2 0 225.4 0 255.6c0 31.2 40.8 62.5 96.3 81.5 4.5 1.5 9 3 13.6 4.3-1.5 6-2.8 11.9-4 18-10.5 55.5-2.3 99.5 23.9 114.6 27 15.6 72.4-.4 116.6-39.1 3.5-3.1 7-6.3 10.5-9.7 4.4 4.3 9 8.4 13.6 12.4 42.8 36.8 85.1 51.7 111.2 36.6 27-15.6 35.8-62.9 24.4-120.5-.9-4.4-1.9-8.9-3-13.5 3.2-.9 6.3-1.9 9.4-2.9 57.7-19.1 99.5-50 99.5-81.7 0-30.3-39.4-59.7-93.8-78.4zM282.9 92.3c37.2-32.4 71.9-45.1 87.7-36 16.9 9.7 23.4 48.9 12.8 100.4-.7 3.4-1.4 6.7-2.3 10-22.2-5-44.7-8.6-67.3-10.6-13-18.6-27.2-36.4-42.6-53.1 3.9-3.7 7.7-7.2 11.7-10.7zM167.2 307.5c5.1 8.7 10.3 17.4 15.8 25.9-15.6-1.7-31.1-4.2-46.4-7.5 4.4-14.4 9.9-29.3 16.3-44.5 4.6 8.8 9.3 17.5 14.3 26.1zm-30.3-120.3c14.4-3.2 29.7-5.8 45.6-7.8-5.3 8.3-10.5 16.8-15.4 25.4-4.9 8.5-9.7 17.2-14.2 26-6.3-14.9-11.6-29.5-16-43.6zm27.4 68.9c6.6-13.8 13.8-27.3 21.4-40.6s15.8-26.2 24.4-38.9c15-1.1 30.3-1.7 45.9-1.7s31 .6 45.9 1.7c8.5 12.6 16.6 25.5 24.3 38.7s14.9 26.7 21.7 40.4c-6.7 13.8-13.9 27.4-21.6 40.8-7.6 13.3-15.7 26.2-24.2 39-14.9 1.1-30.4 1.6-46.1 1.6s-30.9-.5-45.6-1.4c-8.7-12.7-16.9-25.7-24.6-39s-14.8-26.8-21.5-40.6zm180.6 51.2c5.1-8.8 9.9-17.7 14.6-26.7 6.4 14.5 12 29.2 16.9 44.3-15.5 3.5-31.2 6.2-47 8 5.4-8.4 10.5-17 15.5-25.6zm14.4-76.5c-4.7-8.8-9.5-17.6-14.5-26.2-4.9-8.5-10-16.9-15.3-25.2 16.1 2 31.5 4.7 45.9 8-4.6 14.8-10 29.2-16.1 43.4zM256.2 118.3c10.5 11.4 20.4 23.4 29.6 35.8-19.8-.9-39.7-.9-59.5 0 9.8-12.9 19.9-24.9 29.9-35.8zM140.2 57c16.8-9.8 54.1 4.2 93.4 39 2.5 2.2 5 4.6 7.6 7-15.5 16.7-29.8 34.5-42.9 53.1-22.6 2-45 5.5-67.2 10.4-1.3-5.1-2.4-10.3-3.5-15.5-9.4-48.4-3.2-84.9 12.6-94zm-24.5 263.6c-4.2-1.2-8.3-2.5-12.4-3.9-21.3-6.7-45.5-17.3-63-31.2-10.1-7-16.9-17.8-18.8-29.9 0-18.3 31.6-41.7 77.2-57.6 5.7-2 11.5-3.8 17.3-5.5 6.8 21.7 15 43 24.5 63.6-9.6 20.9-17.9 42.5-24.8 64.5zm116.6 98c-16.5 15.1-35.6 27.1-56.4 35.3-11.1 5.3-23.9 5.8-35.3 1.3-15.9-9.2-22.5-44.5-13.5-92 1.1-5.6 2.3-11.2 3.7-16.7 22.4 4.8 45 8.1 67.9 9.8 13.2 18.7 27.7 36.6 43.2 53.4-3.2 3.1-6.4 6.1-9.6 8.9zm24.5-24.3c-10.2-11-20.4-23.2-30.3-36.3 9.6.4 19.5.6 29.5.6 10.3 0 20.4-.2 30.4-.7-9.2 12.7-19.1 24.8-29.6 36.4zm130.7 30c-.9 12.2-6.9 23.6-16.5 31.3-15.9 9.2-49.8-2.8-86.4-34.2-4.2-3.6-8.4-7.5-12.7-11.5 15.3-16.9 29.4-34.8 42.2-53.6 22.9-1.9 45.7-5.4 68.2-10.5 1 4.1 1.9 8.2 2.7 12.2 4.9 21.6 5.7 44.1 2.5 66.3zm18.2-107.5c-2.8.9-5.6 1.8-8.5 2.6-7-21.8-15.6-43.1-25.5-63.8 9.6-20.4 17.7-41.4 24.5-62.9 5.2 1.5 10.2 3.1 15 4.7 46.6 16 79.3 39.8 79.3 58 0 19.6-34.9 44.9-84.8 61.4zm-149.7-15c25.3 0 45.8-20.5 45.8-45.8s-20.5-45.8-45.8-45.8c-25.3 0-45.8 20.5-45.8 45.8s20.5 45.8 45.8 45.8z\" />\n                  </svg>\n                  <p>React</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 207 116\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M143.314 13.791C137.366 21.377 128.45 33.06 123.5 39.755C118.55 46.449 114.253 51.943 113.952 51.963C113.65 51.983 110.092 47.387 106.045 41.75C97.284 29.547 95.087 27 93.326 27C90.931 27 91.906 28.917 99.823 39.773C104.126 45.673 108.448 51.73 109.427 53.233L111.208 55.967L100.604 70.52C94.772 78.524 90 85.313 90 85.606C90 85.899 90.999 85.995 92.221 85.82C93.753 85.599 97.393 81.43 103.971 72.361C109.212 65.134 113.78 59.388 114.121 59.591C114.463 59.793 118.963 65.81 124.121 72.96C131.448 83.117 134.005 85.965 135.809 85.98C138.583 86.004 139.169 87.056 127.183 70.5C122.007 63.35 117.567 56.981 117.317 56.348C116.954 55.43 130.677 34.939 153.211 2.75C154.27 1.237 154.909 0 154.632 0C154.355 0 149.262 6.206 143.314 13.791ZM0.667 27.667C0.3 28.033 0 41.308 0 57.167C0 85.254 0.051 86 1.984 86C3.905 86 3.976 85.171 4.234 59.588L4.5 33.176L20 55.807C37.954 82.021 67.89 122.814 63.439 115C61.525 111.64 6.697 30.369 5.252 28.75C3.635 26.938 1.823 26.51 0.667 27.667ZM49 56.521V86.042L68.75 85.771C85.518 85.541 88.5 85.274 88.5 84C88.5 82.733 85.74 82.458 70.75 82.227L53 81.954V69.477V57H69.5C83.5 57 86 56.773 86 55.5C86 54.227 83.5 54 69.5 54H53V42.5V31H70.5C87.333 31 88 30.924 88 29C88 27.068 87.333 27 68.5 27H49V56.521ZM139.686 27.648C139.309 28.025 139 28.933 139 29.667C139 30.689 141.331 31 148.984 31H158.968L159.234 58.25C159.493 84.745 159.555 85.5 161.5 85.5C163.445 85.5 163.507 84.745 163.766 58.25L164.032 31H174.089C183.129 31 184.113 30.823 183.81 29.25C183.504 27.658 181.528 27.476 161.923 27.231C150.069 27.083 140.063 27.271 139.686 27.648ZM198.447 70.059C196.308 72.422 197.365 75.253 200.607 75.847C203.474 76.373 204.588 77.812 203.2 79.2C202.267 80.133 201.733 80.133 200.8 79.2C199.334 77.734 197 77.624 197 79.021C197 81.025 201.806 82.409 204.5 81.182C208.607 79.311 207.416 74.759 202.583 73.858C201.528 73.661 200.478 72.938 200.25 72.25C199.736 70.709 203.183 70.583 204.687 72.087C205.415 72.815 205.983 72.837 206.404 72.156C207.063 71.088 203.369 68 201.432 68C200.815 68 199.472 68.926 198.447 70.059ZM192 74.108C192 79.058 191.922 79.197 189.5 78.589C186.815 77.916 186.26 78.86 188.2 80.8C190.002 82.602 192.798 82.246 193.965 80.066C195.627 76.959 195.293 69 193.5 69C192.362 69 192 70.234 192 74.108ZM182.192 80.075C182.389 80.666 182.978 81.15 183.5 81.15C184.022 81.15 184.611 80.666 184.808 80.075C185.005 79.484 184.417 79 183.5 79C182.583 79 181.995 79.484 182.192 80.075Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>NextJs</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 512 512\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M224 1.13599C129.95 14.001 52.411 74.023 17.502 160.982C4.84899 192.501 0.0369873 218.682 0.0369873 256C0.0369873 293.318 4.84899 319.499 17.502 351.018C52.188 437.422 129.093 497.391 222 510.484C236.198 512.484 275.802 512.484 290 510.484C382.907 497.391 459.812 437.422 494.498 351.018C507.151 319.499 511.963 293.318 511.963 256C511.963 218.682 507.151 192.501 494.498 160.982C459.812 74.578 382.907 14.609 290 1.51599C278.253 -0.139009 235.137 -0.387009 224 1.13599ZM283.872 57.55C327.027 63.841 366.781 83.738 397.387 114.364C406.912 123.894 417.331 136.522 416.842 137.942C416.466 139.032 391.933 160 391.032 160C390.725 160 388.485 157.454 386.054 154.341C361.588 123.015 324.775 100.692 285.5 93.365C271.425 90.74 240.575 90.74 226.5 93.365C170.968 103.724 123.738 142.448 102.566 194.977L99.956 201.454L205.272 306.771L310.589 412.088L319.045 408.533C346.855 396.839 373.215 375.905 390.254 351.983C401.209 336.603 413.068 310.927 416.456 295.25L417.159 292H373.579H330V274.5V257H393H456V265.122C456 281.646 450.895 306.664 443.463 326.555C421.428 385.539 371.374 431.564 310.698 448.635L300.896 451.392L180.905 331.446L60.914 211.5L61.549 208C62.945 200.304 70.343 179.974 75.926 168.49C104.955 108.785 161.034 67.747 227.5 57.572C240.139 55.637 270.669 55.625 283.872 57.55ZM154.002 358.606L251.5 456.211L242.5 455.562C148.57 448.792 72.919 379.872 58.57 288C57 277.945 55.458 261 56.114 261C56.329 261 100.378 304.923 154.002 358.606Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>GatsbyJs</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 600 600\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M0 300V600H300H600V300V0H300H0V300ZM487.659 278.165C493.246 280.079 500.421 283.188 503.603 285.073C510.517 289.169 523.972 302.296 529.396 310.237C532.817 315.246 533.123 316.147 531.901 317.619C529.826 320.119 493.175 344.227 492.044 343.836C491.507 343.651 488.912 340.82 486.277 337.545C477.225 326.296 468.93 322 456.261 322C445.835 322 441.211 323.659 435.377 329.492C431.23 333.64 430.031 335.627 429.123 339.861C427.677 346.603 427.704 347.641 429.477 353.612C432.569 364.022 440.134 369.72 466.505 381.501C521.236 405.952 537.03 418.83 546.202 446.485C550.157 458.408 551.173 477.032 548.579 490.037C543.243 516.791 523.888 536.562 494.394 545.384C480.686 549.484 472.699 550.316 452.773 549.722C437.411 549.263 433.066 548.776 425.5 546.662C397.87 538.941 377.577 525.137 363.985 504.816C360.693 499.895 358 495.504 358 495.057C358 493.76 359.492 492.797 379 481.505C389.175 475.615 398.474 470.182 399.665 469.431C401.708 468.142 402.172 468.498 407.953 475.783C422.527 494.151 435.938 501.223 456.5 501.386C473.645 501.521 487.435 495.232 492.78 484.841C496.339 477.923 496.175 467.929 492.389 460.974C487.815 452.569 480.656 448.025 451 434.698C428.989 424.806 418.876 419.68 410.658 414.247C395.837 404.449 385.635 392.283 379.123 376.641C373.524 363.192 372.937 337.923 377.894 323.725C386.228 299.85 403.855 283.757 429.586 276.533C437.956 274.184 439.69 274.051 458 274.358C477.261 274.68 477.625 274.727 487.659 278.165ZM342 300.988V324.977L303.25 325.238L264.5 325.5L264.246 436.25L263.991 547H236.996H210V436V325H171H132V301V277H237H342V300.988Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>TypeScript</p>\n                </div>\n              </li>\n            </ul>\n          </StyledListContainer>\n          <StyledListContainer className=\"be\">\n            <h4>Back-End</h4>\n            <ul>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                    <path d=\"M0 32v448h448V32H0zm243.8 349.4c0 43.6-25.6 63.5-62.9 63.5-33.7 0-53.2-17.4-63.2-38.5l34.3-20.7c6.6 11.7 12.6 21.6 27.1 21.6 13.8 0 22.6-5.4 22.6-26.5V237.7h42.1v143.7zm99.6 63.5c-39.1 0-64.4-18.6-76.7-43l34.3-19.8c9 14.7 20.8 25.6 41.5 25.6 17.4 0 28.6-8.7 28.6-20.8 0-14.4-11.4-19.5-30.7-28l-10.5-4.5c-30.4-12.9-50.5-29.2-50.5-63.5 0-31.6 24.1-55.6 61.6-55.6 26.8 0 46 9.3 59.8 33.7L368 290c-7.2-12.9-15-18-27.1-18-12.3 0-20.1 7.8-20.1 18 0 12.6 7.8 17.7 25.9 25.6l10.5 4.5c35.8 15.3 55.9 31 55.9 66.2 0 37.8-29.8 58.6-69.7 58.6z\" />\n                  </svg>\n                  <p>Javascript</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 493 489\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M243.553 4.571C242.315 11.167 240.192 14.056 225.601 29C208.51 46.504 197.746 60.833 187.665 79.5C163.368 124.494 154.351 179.131 163.982 223C172.398 261.337 195.919 299.687 228.365 327.976C236.487 335.057 238.921 337.792 239.845 340.876C241.746 347.221 243.988 363.93 243.994 371.799L244 379.098L248.25 381.027C250.587 382.088 253.001 382.966 253.613 382.978C254.378 382.993 254.876 376.764 255.206 363.042C255.793 338.685 256.176 337.673 268.956 326.727C279.529 317.672 294.154 301.39 301.342 290.672C314.866 270.507 325.536 243.586 330.145 218C332.251 206.307 331.961 166.925 329.686 155.658C322.091 118.04 305.052 80.965 282.728 53.479C279.164 49.09 271.74 40.685 266.23 34.799C257.686 25.672 255.336 22.38 250.245 12.405L244.277 0.710999L243.553 4.571ZM342.497 384.646C341.673 385.902 341 387.131 341 387.377C341 387.623 342.913 388.141 345.25 388.528C353.652 389.92 353.062 387.347 352.765 421.293L352.5 451.5L349.096 452.6C345.93 453.624 343 456.31 343 458.191C343 458.636 352.593 459 364.318 459C387.032 459 391.443 458.337 401.02 453.488C406.796 450.563 414.494 442.346 417.055 436.371C423.637 421.017 420.116 401.684 408.902 391.601C399.973 383.574 396.271 382.749 368.247 382.541C343.999 382.361 343.993 382.362 342.497 384.646ZM428.382 384.473C426.337 387.392 426.596 387.757 431.25 388.525C433.587 388.911 436.063 389.68 436.75 390.236C437.699 391.002 438 398.311 438 420.551C438 452.758 437.955 453 431.964 453C429.194 453 427 455.211 427 458.003C427 458.825 433.138 459.05 449.25 458.819C469.368 458.531 471.936 458.298 476.051 456.394C494.783 447.727 497.821 426.911 481.593 418.414L476.101 415.539L479.016 413.693C483.638 410.767 486 406.061 486 399.78C486 392.711 483.211 388.35 476.593 385.069C471.886 382.735 470.845 382.635 450.726 382.569C430.952 382.504 429.685 382.612 428.382 384.473ZM390.59 392.253C399.257 396.712 403.973 403.29 406.041 413.804C410.42 436.062 396.279 455.229 377.387 452.64C370.753 451.73 367.374 449.618 366.634 445.918C365.737 441.437 365.842 390.494 366.75 389.567C367.163 389.145 371.55 388.988 376.5 389.217C383.709 389.551 386.513 390.155 390.59 392.253ZM465.617 390.914C471.208 393.453 473 396.315 473 402.707C473 407.072 472.517 408.509 470.166 411.14C467.514 414.108 466.808 414.342 459.166 414.784L451 415.257V402.128V389L456.25 389.022C459.198 389.034 463.305 389.864 465.617 390.914ZM13 408.798C9.97498 409.591 5.81298 410.654 3.74998 411.159C-1.21602 412.375 -0.983017 414.124 4.49998 416.788L8.99998 418.974V434.865C8.99998 451.846 8.91398 452.147 3.74998 453.381C1.66498 453.879 0.999982 454.638 0.999982 456.519C0.999982 458.919 1.22398 459 7.85298 459C11.623 459 17.473 458.711 20.853 458.358C25.978 457.822 27 457.402 27 455.833C27 454.53 26.051 453.76 23.922 453.334C19.553 452.461 18.902 449.815 19.223 434.219C19.494 421.013 19.557 420.669 22.077 418.79C25.885 415.95 31.157 415.026 34.804 416.56C39.97 418.732 41 422.184 41 437.328C41 451.665 40.836 452.166 35.75 453.381C33.897 453.824 33 454.684 33 456.019C33 457.893 33.709 458 46.07 458C58.949 458 59.134 457.968 58.82 455.809C58.599 454.294 57.497 453.36 55.25 452.781L52 451.943L51.989 439.721C51.983 433 51.705 425.849 51.371 423.83C50.792 420.328 50.95 420.066 54.842 418.08C60.695 415.095 65.251 415.359 69.234 418.916L72.5 421.833V436.666V451.5L69.25 452.93C66.929 453.952 66 455.024 66 456.68C66 458.881 66.352 459 72.853 459C76.623 459 82.473 458.711 85.853 458.358C90.894 457.831 92 457.388 92 455.896C92 454.62 90.806 453.756 88 453L84 451.923V439.011C84 423.194 82.782 416.961 78.809 412.435C73.081 405.912 64.454 405.79 54.517 412.091L50.067 414.913L47.192 412.038C42.929 407.775 37.351 406.567 31.333 408.602C28.675 409.501 25.306 411.083 23.846 412.118C20.192 414.708 19.275 414.483 19.769 411.118C20.002 409.534 19.811 408.038 19.346 407.796C18.881 407.553 16.025 408.004 13 408.798ZM118.314 408.801C109.808 411.833 105.502 415.276 102.474 421.464C100.013 426.494 99.794 427.823 100.203 435.265C100.747 445.185 103.232 450.706 109.046 454.918C121.717 464.097 141.119 459.478 148.209 445.595C151.144 439.846 151.734 429.725 149.521 423.063C145.375 410.58 131.33 404.161 118.314 408.801ZM168.5 409.396C156.305 412.603 155.279 413.905 162.5 417L167 418.929V434.764C167 451.482 166.614 453 162.367 453C160.08 453 158.31 456.074 159.494 457.991C159.861 458.585 165.399 459 172.952 459C183.438 459 185.891 458.726 186.362 457.5C187.222 455.258 186.025 453 183.975 453C179.065 453 179 452.777 179 435.837V419.888L183.602 417.852C189.202 415.375 193.664 415.951 197.09 419.593C199.378 422.026 199.516 422.907 199.821 437.03L200.143 451.906L196.821 452.761C194.216 453.431 193.431 454.202 193.181 456.337L192.861 459.059L206.181 458.78L219.5 458.5V456.038C219.5 454.033 218.828 453.416 215.891 452.722L212.282 451.868L211.641 444.283C211.289 440.111 211 433.036 211 428.561C211 422.109 210.534 419.502 208.75 415.97C203.433 405.445 192.395 404.122 181.194 412.666C177.962 415.131 177.816 415.156 178.457 413.135C179.176 410.871 178.331 406.901 177.183 407.146C176.807 407.226 172.9 408.238 168.5 409.396ZM243.147 408.078C232.049 410.253 225.997 417.183 226.004 427.71C226.008 434.614 228.34 439.088 233.53 442.15L237.041 444.222L232.459 447.128C228.645 449.547 227.983 450.409 228.514 452.267C228.864 453.495 230.473 455.662 232.088 457.083L235.025 459.666L229.943 463.951C223.846 469.092 222.749 471.506 224.17 476.653C226.951 486.727 240.747 491.64 254.655 487.51C264.136 484.694 271.855 477.308 274.104 468.9C275.18 464.878 275.098 463.878 273.413 460.482C270.359 454.329 267.856 453.136 254.54 451.484C247.975 450.67 242.183 449.583 241.669 449.069C240.125 447.525 241.73 445.098 244.707 444.473C252.978 442.737 256.138 441.511 259.518 438.725C264.183 434.879 266 430.621 266 423.532C266 418.26 266.121 418 268.566 418C269.977 418 271.95 417.562 272.951 417.026C274.969 415.946 276.309 411.97 275.429 409.675C274.935 408.388 274.504 408.377 272.18 409.59C268.786 411.36 265.638 411.362 259.432 409.598C252.093 407.513 247.987 407.129 243.147 408.078ZM299.5 408.617C291.322 411.215 286.85 414.799 283.552 421.4C279.833 428.845 279.606 438.06 282.955 445.631C287.318 455.496 293.631 459.454 305 459.454C313.156 459.454 318.743 457.341 324.342 452.14C333.299 443.818 334.545 426.574 326.946 416.085C321.662 408.79 309.431 405.462 299.5 408.617ZM131.609 416.528C135.63 419.579 138.083 424.854 138.967 432.353C140.775 447.688 133.713 456.832 123.39 452.519C115.082 449.047 111.706 442.732 111.582 430.427C111.51 423.383 111.819 421.885 114 418.684C115.375 416.666 117.625 414.583 119 414.054C122.532 412.698 127.966 413.763 131.609 416.528ZM250 414.279C257.718 418.135 257.896 434.729 250.253 437.895C247.793 438.914 246.626 438.871 243.707 437.651C238.472 435.464 236.536 431.851 236.516 424.235C236.502 418.449 236.771 417.598 239.306 415.416C242.392 412.759 246.157 412.358 250 414.279ZM311.5 415.88C316.305 418.508 320.032 427.047 320.112 435.61C320.239 449.087 314.645 455.597 305.141 453.038C296.853 450.806 291.145 439.455 292.378 427.659C293.172 420.057 295.601 415.838 300.049 414.331C303.906 413.023 307.058 413.45 311.5 415.88ZM469.596 423.3C476.69 426.989 480.017 434.508 477.952 442.179C475.931 449.685 468.851 453.727 459.612 452.65C451.599 451.716 451 450.436 451 434.246V420.714L458.846 421.252C463.162 421.548 467.999 422.469 469.596 423.3ZM256.583 462.125C264.391 464.091 267.308 470.796 262.832 476.486C255.087 486.333 234 482.259 234 470.917C234 467.922 234.682 466.609 237.535 464.104C240.576 461.434 241.841 461 246.592 461C249.629 461 254.125 461.506 256.583 462.125Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>MongoDB</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 315 123\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M162.75 0.715969C159.142 1.26297 159.278 2.25597 163.25 4.35497C165.037 5.29897 165.6 5.77097 164.5 5.40197C157.584 3.08697 146.596 1.01397 141.205 1.00797C135.761 1.00097 134.559 1.34997 132.323 3.58597C129.951 5.95797 129.783 6.67397 130.289 12.255C131.377 24.253 141.841 40.513 154.5 49.878L157.5 52.097L154.231 50.513C152.433 49.642 147.817 45.961 143.971 42.334C135.712 34.543 130.521 25.089 128.716 14.553L127.546 7.71897L114.523 8.33297C93.7059 9.31397 78.0439 13.581 55.4999 24.412C40.4249 31.654 29.7169 38.123 16.7489 47.818C4.91695 56.665 -0.678057 61.618 0.175943 62.493C0.547943 62.873 3.43394 62.434 6.58894 61.517C26.5949 55.701 49.5669 55.625 65.4999 61.321C73.2119 64.078 81.8679 70.03 87.9229 76.739L93.9999 83.472V71.736V60H106.841H119.682L125.914 71.5C129.342 77.825 132.306 83 132.5 83C132.694 83 135.658 77.825 139.086 71.5L145.318 60H158.159H171V82C171 96.615 171.35 104 172.044 104C172.618 104 175.43 101.489 178.294 98.419C187.32 88.744 195.35 86.009 214.799 85.986C221.235 85.979 227.475 85.711 228.667 85.391C230.796 84.82 230.805 84.734 229.202 80.406C227.768 76.539 227.748 75.828 229.035 74.577C230.821 72.839 241.002 70.365 272.957 63.903C286.922 61.079 299.631 57.942 302.582 56.591C307.275 54.443 308.081 53.561 311.374 46.978C316.009 37.715 316.149 33.646 311.91 31.453C310.21 30.574 308.185 30.099 307.41 30.396C306.634 30.694 306 30.579 306 30.141C306 28.998 287.471 21.646 274 17.445C251.027 10.28 218.342 3.15297 198.789 1.04597C189.46 0.040969 168.476 -0.151031 162.75 0.715969ZM154.5 17.994C158.9 20.195 163.85 23.159 165.5 24.58L168.5 27.163L165.377 25.621C161.344 23.631 160.535 24.539 163.115 28.162L165.171 31.049L161.598 29.345C156.747 27.032 156.1 28.211 159.867 32.501C163.38 36.502 163.673 37.196 161.5 36.362C159.811 35.713 159.364 38.489 160.995 39.497C161.542 39.835 162.494 41.054 163.11 42.206C164.182 44.209 164.084 44.198 160.866 41.952C151.139 35.163 140 20.726 140 14.908C140 13.013 140.396 12.826 143.25 13.371C145.037 13.712 150.1 15.792 154.5 17.994ZM224.5 22.521C239.524 25.049 252.213 28.248 250.793 29.149C248.942 30.324 230.194 30.182 225.795 28.96C223.758 28.394 221.135 26.709 219.967 25.216C218.798 23.722 216.865 22.207 215.671 21.85C211.851 20.706 215.246 20.964 224.5 22.521ZM224.784 64.548C219.83 67.127 218.066 69.341 217.9 73.184C217.802 75.467 217.79 75.464 217.057 73C216.648 71.625 216.709 69.713 217.191 68.752C218.041 67.059 226.474 62.093 228.5 62.093C229.05 62.093 227.378 63.198 224.784 64.548ZM120 105V123H133H146V105C146 95.1 145.833 87 145.629 87C145.424 87 142.612 91.043 139.379 95.984C136.145 100.926 133.221 104.976 132.88 104.984C132.539 104.993 129.692 100.95 126.554 96C123.416 91.05 120.658 87 120.425 87C120.191 87 120 95.1 120 105Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Mongoose</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 618 619\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M271.5 1.62001C204.255 9.48701 145.197 37.714 94.358 86.284C77.391 102.494 58.119 126.088 45.346 146.287C37.358 158.919 23.321 187.184 18.508 200.327C5.672 235.382 0.00201416 268.673 0.00201416 309C0.00201416 359.24 8.96001 400.172 29.083 441.877C44.865 474.588 63.693 500.812 90.947 528.042C136.589 573.644 188.858 601.804 248.5 612.922C285.482 619.817 332.518 619.817 369.5 612.922C429.142 601.804 481.411 573.644 527.053 528.042C578.982 476.158 608.501 415.735 616.476 345C617.393 336.861 617.998 322.564 617.998 309C617.998 258.76 609.04 217.828 588.917 176.123C566.831 130.347 534.138 91.087 491.213 58.792C476.964 48.071 463.138 39.696 444.5 30.497C412.147 14.529 381.693 5.66101 345 1.52401C328.022 -0.389994 288.236 -0.337993 271.5 1.62001ZM218.5 192.909C262.382 204.552 290.725 246.888 293.705 305.244L294.305 316.989L208.402 317.244L122.5 317.5L122.158 323C121.7 330.371 123.736 343.947 126.559 352.335C133.935 374.255 151.867 389.754 176 395.069C185.07 397.066 205.644 396.802 213.913 394.582C232.818 389.507 247.84 376.385 252.645 360.75L254.412 355H272.285H290.159L289.482 358.25C282.718 390.701 258.049 415.54 223.5 424.685C214.398 427.094 211.748 427.34 194 427.416C169.871 427.52 159.69 425.749 143.782 418.679C129.388 412.283 113.936 399.293 105.051 386.119C83.863 354.704 77.554 301.972 90.403 263.693C101.991 229.175 127.449 203.694 160.051 193.985C170.881 190.759 177.352 190.096 194.5 190.453C206.816 190.71 212.342 191.275 218.5 192.909ZM388.45 231.097C403.823 253.642 416.877 272.483 417.459 272.966C418.15 273.54 428.843 259.329 448.342 231.922L478.166 190H500.583C512.912 190 523 190.206 523 190.457C523 190.709 505.091 214.897 483.203 244.207C461.314 273.518 443.076 298.04 442.674 298.701C442.227 299.435 459.632 324.582 487.471 363.422C512.512 398.358 533 427.188 533 427.488C533 427.789 522.125 427.915 508.833 427.768L484.665 427.5L451.583 378.298C420.803 332.52 418.387 329.214 416.88 330.798C415.989 331.734 404.554 348.475 391.468 368C378.382 387.525 363.902 409.012 359.29 415.75L350.905 428H328.005H305.106L349.537 365.75C373.975 331.512 393.783 302.984 393.555 302.354C393.328 301.723 375.602 277.359 354.164 248.211C332.726 219.063 314.418 194.041 313.478 192.607L311.77 190L336.135 190.054L360.5 190.108L388.45 231.097ZM169 224.341C157.823 227.669 151.389 231.572 142.403 240.477C135.97 246.851 133.454 250.247 130.163 257C125.828 265.894 123.394 273.913 122.347 282.75L121.725 288H188.362H255V284.66C255 282.823 254.103 277.76 253.006 273.41C247.802 252.769 235.544 237.147 217.911 228.685C206.386 223.154 200.971 221.985 187.201 222.054C179.153 222.094 174.64 222.661 169 224.341Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>ExpressJS</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 277 182\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M120.5 1.40998C105.229 4.38898 92.173 10.35 79.857 19.967C72.237 25.917 61.127 38.568 58.283 44.534C57.057 47.103 55.844 47.908 51.642 48.939C44.038 50.805 31.243 57.273 25.141 62.335C13.515 71.979 4.61898 86.336 1.45398 100.561C-0.836017 110.855 -0.136017 127.815 2.95798 137C7.84098 151.496 20.46 167.305 33.05 174.701C42.543 180.278 42 180.609 42 169.241V159.268L37.58 155.824C25.103 146.103 18 131.666 18 116.029C18 101.294 22.45 90.57 32.987 79.911C40.858 71.949 49.521 67.489 60.513 65.74L68.145 64.526L72.182 56.766C82.595 36.753 103.379 22.394 126.917 18.952C151.741 15.322 178.261 25.779 194.308 45.524C200.031 52.566 206.062 64.089 208.426 72.5C209.354 75.8 210.343 79.287 210.624 80.25C211.026 81.628 212.245 82 216.357 82C233.119 82 247.982 91.519 255.39 107C258.26 112.998 258.5 114.31 258.5 124C258.5 133.459 258.224 135.062 255.719 140.164C252.368 146.986 246.353 153.219 239.25 157.228L234 160.191V169.663C234 180.717 233.289 180.448 246 174.193C251.243 171.612 255.618 168.395 260.54 163.501C272.02 152.084 277 140.134 277 124C277 107.149 271.784 94.742 259.465 82.293C250.521 73.255 241.355 67.978 230.82 65.802L225.132 64.627L223.092 59.064C217.343 43.385 203.842 26.556 188.601 16.07C181.493 11.179 168.312 5.23198 159.5 2.93898C149.186 0.255976 130.227 -0.488024 120.5 1.40998ZM68.236 94.263C60.956 101.558 55 107.858 55 108.263C55 108.669 56.8 109 59 109H63V140.596C63 176.061 63.067 176.428 70.21 180.095C73.431 181.749 76.169 182 90.96 182C100.332 182 108 181.628 108 181.174C108 180.72 106.832 179.258 105.405 177.924C100.072 172.942 100 172.431 100 139.55V109H104C106.2 109 108 108.656 108 108.236C108 107.816 102.031 101.516 94.736 94.236L81.473 81L68.236 94.263ZM124.236 109.263C116.956 116.558 111 122.858 111 123.263C111 123.669 112.8 124 115 124H119L119.004 147.75C119.007 169.685 119.159 171.749 120.995 174.759C124.978 181.292 127.47 181.992 146.75 181.996C156.238 181.998 164 181.62 164 181.155C164 180.69 163.036 179.453 161.859 178.405C160.681 177.357 158.891 174.7 157.881 172.5C156.276 169.005 156.041 165.693 156.022 146.25L156 124H160C162.558 124 164 123.544 164 122.736C164 121.572 139.105 96 137.972 96C137.697 96 131.516 101.969 124.236 109.263ZM180.143 124.357C166.466 138.062 165.975 139 172.479 139C174.79 139 174.795 139.03 175.147 155.25C175.452 169.307 175.77 171.957 177.5 174.887C181.212 181.172 184.264 182 203.734 182C213.23 182 221 181.681 221 181.292C221 180.903 219.313 178.857 217.25 176.747L213.5 172.909L213.186 155.461C212.906 139.953 213.045 138.08 214.438 138.615C215.299 138.945 217.207 138.914 218.676 138.545C221.252 137.899 220.869 137.395 207.938 124.437C200.562 117.047 194.29 111 194 111C193.71 111 187.474 117.011 180.143 124.357Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Cloudinary</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\">\n                    <path d=\"M316.3 452c-2.1 0-4.2-.6-6.1-1.6L291 439c-2.9-1.6-1.5-2.2-.5-2.5 3.8-1.3 4.6-1.6 8.7-4 .4-.2 1-.1 1.4.1l14.8 8.8c.5.3 1.3.3 1.8 0L375 408c.5-.3.9-.9.9-1.6v-66.7c0-.7-.3-1.3-.9-1.6l-57.8-33.3c-.5-.3-1.2-.3-1.8 0l-57.8 33.3c-.6.3-.9 1-.9 1.6v66.7c0 .6.4 1.2.9 1.5l15.8 9.1c8.6 4.3 13.9-.8 13.9-5.8v-65.9c0-.9.7-1.7 1.7-1.7h7.3c.9 0 1.7.7 1.7 1.7v65.9c0 11.5-6.2 18-17.1 18-3.3 0-6 0-13.3-3.6l-15.2-8.7c-3.7-2.2-6.1-6.2-6.1-10.5v-66.7c0-4.3 2.3-8.4 6.1-10.5l57.8-33.4c3.7-2.1 8.5-2.1 12.1 0l57.8 33.4c3.7 2.2 6.1 6.2 6.1 10.5v66.7c0 4.3-2.3 8.4-6.1 10.5l-57.8 33.4c-1.7 1.1-3.8 1.7-6 1.7zm46.7-65.8c0-12.5-8.4-15.8-26.2-18.2-18-2.4-19.8-3.6-19.8-7.8 0-3.5 1.5-8.1 14.8-8.1 11.9 0 16.3 2.6 18.1 10.6.2.8.8 1.3 1.6 1.3h7.5c.5 0 .9-.2 1.2-.5.3-.4.5-.8.4-1.3-1.2-13.8-10.3-20.2-28.8-20.2-16.5 0-26.3 7-26.3 18.6 0 12.7 9.8 16.1 25.6 17.7 18.9 1.9 20.4 4.6 20.4 8.3 0 6.5-5.2 9.2-17.4 9.2-15.3 0-18.7-3.8-19.8-11.4-.1-.8-.8-1.4-1.7-1.4h-7.5c-.9 0-1.7.7-1.7 1.7 0 9.7 5.3 21.3 30.6 21.3 18.5 0 29-7.2 29-19.8zm54.5-50.1c0 6.1-5 11.1-11.1 11.1s-11.1-5-11.1-11.1c0-6.3 5.2-11.1 11.1-11.1 6-.1 11.1 4.8 11.1 11.1zm-1.8 0c0-5.2-4.2-9.3-9.4-9.3-5.1 0-9.3 4.1-9.3 9.3 0 5.2 4.2 9.4 9.3 9.4 5.2-.1 9.4-4.3 9.4-9.4zm-4.5 6.2h-2.6c-.1-.6-.5-3.8-.5-3.9-.2-.7-.4-1.1-1.3-1.1h-2.2v5h-2.4v-12.5h4.3c1.5 0 4.4 0 4.4 3.3 0 2.3-1.5 2.8-2.4 3.1 1.7.1 1.8 1.2 2.1 2.8.1 1 .3 2.7.6 3.3zm-2.8-8.8c0-1.7-1.2-1.7-1.8-1.7h-2v3.5h1.9c1.6 0 1.9-1.1 1.9-1.8zM137.3 191c0-2.7-1.4-5.1-3.7-6.4l-61.3-35.3c-1-.6-2.2-.9-3.4-1h-.6c-1.2 0-2.3.4-3.4 1L3.7 184.6C1.4 185.9 0 188.4 0 191l.1 95c0 1.3.7 2.5 1.8 3.2 1.1.7 2.5.7 3.7 0L42 268.3c2.3-1.4 3.7-3.8 3.7-6.4v-44.4c0-2.6 1.4-5.1 3.7-6.4l15.5-8.9c1.2-.7 2.4-1 3.7-1 1.3 0 2.6.3 3.7 1l15.5 8.9c2.3 1.3 3.7 3.8 3.7 6.4v44.4c0 2.6 1.4 5.1 3.7 6.4l36.4 20.9c1.1.7 2.6.7 3.7 0 1.1-.6 1.8-1.9 1.8-3.2l.2-95zM472.5 87.3v176.4c0 2.6-1.4 5.1-3.7 6.4l-61.3 35.4c-2.3 1.3-5.1 1.3-7.4 0l-61.3-35.4c-2.3-1.3-3.7-3.8-3.7-6.4v-70.8c0-2.6 1.4-5.1 3.7-6.4l61.3-35.4c2.3-1.3 5.1-1.3 7.4 0l15.3 8.8c1.7 1 3.9-.3 3.9-2.2v-94c0-2.8 3-4.6 5.5-3.2l36.5 20.4c2.3 1.2 3.8 3.7 3.8 6.4zm-46 128.9c0-.7-.4-1.3-.9-1.6l-21-12.2c-.6-.3-1.3-.3-1.9 0l-21 12.2c-.6.3-.9.9-.9 1.6v24.3c0 .7.4 1.3.9 1.6l21 12.1c.6.3 1.3.3 1.8 0l21-12.1c.6-.3.9-.9.9-1.6v-24.3zm209.8-.7c2.3-1.3 3.7-3.8 3.7-6.4V192c0-2.6-1.4-5.1-3.7-6.4l-60.9-35.4c-2.3-1.3-5.1-1.3-7.4 0l-61.3 35.4c-2.3 1.3-3.7 3.8-3.7 6.4v70.8c0 2.7 1.4 5.1 3.7 6.4l60.9 34.7c2.2 1.3 5 1.3 7.3 0l36.8-20.5c2.5-1.4 2.5-5 0-6.4L550 241.6c-1.2-.7-1.9-1.9-1.9-3.2v-22.2c0-1.3.7-2.5 1.9-3.2l19.2-11.1c1.1-.7 2.6-.7 3.7 0l19.2 11.1c1.1.7 1.9 1.9 1.9 3.2v17.4c0 2.8 3.1 4.6 5.6 3.2l36.7-21.3zM559 219c-.4.3-.7.7-.7 1.2v13.6c0 .5.3 1 .7 1.2l11.8 6.8c.4.3 1 .3 1.4 0L584 235c.4-.3.7-.7.7-1.2v-13.6c0-.5-.3-1-.7-1.2l-11.8-6.8c-.4-.3-1-.3-1.4 0L559 219zm-254.2 43.5v-70.4c0-2.6-1.6-5.1-3.9-6.4l-61.1-35.2c-2.1-1.2-5-1.4-7.4 0l-61.1 35.2c-2.3 1.3-3.9 3.7-3.9 6.4v70.4c0 2.8 1.9 5.2 4 6.4l61.2 35.2c2.4 1.4 5.2 1.3 7.4 0l61-35.2c1.8-1 3.1-2.7 3.6-4.7.1-.5.2-1.1.2-1.7zm-74.3-124.9l-.8.5h1.1l-.3-.5zm76.2 130.2l-.4-.7v.9l.4-.2z\" />\n                  </svg>\n                  <p>NodeJs</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 177 243\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M10.071 2.75199C8.185 3.71299 5.26 6.22899 3.571 8.34199L0.5 12.185L0.201004 95.842C4.02331e-06 152.091 0.246004 180.684 0.951004 183.115C2.37 188.009 5.41799 191.662 10.055 194.028C13.799 195.938 16.243 196 88 196C159.757 196 162.201 195.938 165.945 194.028C170.582 191.662 173.63 188.009 175.049 183.115C175.754 180.684 176 152.091 175.799 95.842L175.5 12.185L172.429 8.34199C166.195 0.542986 171.493 1.00299 88 1.00299C19.047 1.00299 13.245 1.13299 10.071 2.75199ZM162.927 14.635C164.986 17.251 165 17.834 165 98.68V180.091L162.545 182.545L160.091 185H88H15.909L13.455 182.545L11 180.091V98.68C11 17.834 11.014 17.251 13.073 14.635L15.145 12H88H160.855L162.927 14.635ZM44 72.465C44 95.859 44.331 115 44.735 115C45.139 115 49.977 112.998 55.485 110.55C67.669 105.136 80.82 101.239 91.443 99.895C101.039 98.68 106.084 99.396 108.876 102.368C110.896 104.518 110.98 105.697 111.235 135.549L111.5 166.5L121.75 166.785L132 167.07L131.999 134.285L131.998 101.5L129.132 95.442C125.712 88.212 119.81 82.797 112.609 80.284C103.453 77.087 85.96 78.366 67.267 83.599L65.033 84.225L64.767 57.362L64.5 30.5L54.25 30.215L44 29.93V72.465ZM110.239 35.197C108.748 41.471 104.222 51.363 100.102 57.352C98.439 59.769 97.361 62.028 97.706 62.373C98.051 62.718 102.449 63 107.48 63C116.164 63 116.756 62.861 119.212 60.25C125.436 53.632 132 39.333 132 32.395C132 30.024 131.897 30 121.737 30H111.473L110.239 35.197ZM44 147.122C44 166.14 44.096 167.17 45.75 165.881C50.373 162.276 66.5 147.458 66.5 146.815C66.5 146.086 45.24 127 44.428 127C44.192 127 44 136.055 44 147.122ZM0 228V242H4H8V237V232H12H16V237.057V242.115L20.25 241.807L24.5 241.5V228V214.5L20.25 214.193L16 213.885V218.943V224H12H8V219V214H4H0V228ZM32.667 214.667C32.3 215.033 32 221.333 32 228.667V242H42.5H53V238.5V235H47C42.333 235 41 234.667 41 233.5C41 232.417 42.111 232 45 232C48.905 232 49 231.917 49 228.5C49 225.083 48.905 225 45 225C42.111 225 41 224.583 41 223.5C41 222.347 42.281 222 46.531 222C52.567 222 53.709 220.962 52.589 216.498C51.976 214.058 51.747 214 42.648 214C37.525 214 33.033 214.3 32.667 214.667ZM60 227.872V242H63.945H67.89L68.195 237.25L68.5 232.5L71.013 237C73.305 241.105 73.899 241.527 77.763 241.807C82.681 242.164 82.914 241.485 79.757 235.999L77.514 232.102L79.808 229.964C81.671 228.229 82.046 226.968 81.801 223.264C81.369 216.714 78.48 214.813 68.043 214.209L60 213.743V227.872ZM95.288 215.629C90.675 217.904 87.573 224.668 88.453 230.534C90.879 246.715 113.121 246.715 115.547 230.534C117.311 218.769 105.918 210.388 95.288 215.629ZM122.714 214.619C122.321 215.012 122 221.333 122 228.667V242H126.5H131V237.5C131 235.025 131.341 233 131.757 233C132.174 233 133.738 235.025 135.233 237.5C137.812 241.77 138.182 242 142.475 242C144.964 242 147 241.724 147 241.386C147 241.048 144.945 237.475 142.433 233.445C137.389 225.352 137.408 224.803 142.914 219.563C147.266 215.421 146.927 214 141.587 214C137.575 214 136.898 214.374 134.153 218.106L131.133 222.213L130.817 218.356C130.519 214.735 130.285 214.482 126.964 214.202C125.02 214.039 123.107 214.226 122.714 214.619ZM152.374 215.468C151.111 218.759 152.522 235.622 154.286 238.313C156.655 241.93 162.798 243.677 167.837 242.167C174.583 240.146 175.455 238.317 175.836 225.398L176.172 214H172.086H168L167.985 223.25C167.968 233.577 167.349 235.327 163.887 234.837C161.592 234.513 161.481 234.113 161 224.5L160.5 214.5L156.742 214.189C154.027 213.965 152.815 214.319 152.374 215.468ZM105.171 222.655C107.712 224.954 107.614 231.386 105 234C103.9 235.1 102.55 236 102 236C101.45 236 100.1 235.1 99 234C96.586 231.586 96.37 226.344 98.557 223.223C100.407 220.58 102.665 220.387 105.171 222.655ZM73.5 224C73.5 224.893 72.387 225.628 70.75 225.816C68.511 226.074 68 225.737 68 224C68 222.263 68.511 221.926 70.75 222.184C72.387 222.372 73.5 223.107 73.5 224Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Heroku</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 200 276\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M35.0729 2.63499C33.9329 4.08399 32.9999 5.76399 32.9999 6.36899C32.9999 6.97399 25.5499 55.115 16.4449 113.349C7.33994 171.583 0.0279434 220.14 0.194943 221.253C0.424943 222.777 11.9689 229.717 46.9999 249.388L93.4999 275.5H99.5279C105.543 275.5 105.658 275.444 152.403 249.5C178.169 235.2 199.49 222.876 199.784 222.113C200.079 221.35 194.51 184.675 187.41 140.613C175.882 69.076 174.264 60.259 172.295 58.25C168.169 54.039 166.656 54.98 148.443 73.085L131.257 90.17L125.263 78.835C121.966 72.601 116.022 61.312 112.053 53.749C104.479 39.314 103.147 37.993 97.576 39.391C95.685 39.866 93.541 43.06 87.811 53.937L80.4679 67.875L63.5699 36.187C54.2759 18.759 45.7669 3.48799 44.6609 2.24999C41.8879 -0.855014 37.6849 -0.686014 35.0729 2.63499Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Firebase</p>\n                </div>\n              </li>\n\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 595 392\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M230.5 0.952003C162.372 7.826 105.612 53.063 83.637 118C79.126 131.331 75.977 148.914 75.149 165.402L74.5 178.304L70.784 179.588C63.717 182.029 50.75 189.106 43.639 194.403C16.066 214.94 -0.0429795 247.135 0.0200205 281.578C0.0560205 301.717 3.60202 316.744 12.125 332.877C24.713 356.706 44.323 374.501 68.345 383.893C89.502 392.165 69.466 391.5 297.5 391.5C491.661 391.5 500.848 391.419 508.5 389.645C537.411 382.942 560.494 367.099 576.465 343C583.946 331.71 588.239 322.22 591.784 309.134C594.11 300.547 594.397 297.653 594.417 282.5C594.438 267.015 594.191 264.564 591.644 255C584.213 227.091 567.458 204.106 544 189.641C535.874 184.63 524.616 179.397 516.892 177.04L513.285 175.939L512.727 163.219C512.064 148.092 509.259 137.15 502.545 123.5C489.308 96.59 462.313 76.531 431.84 70.962C422.828 69.315 404.851 69.541 396 71.412C391.875 72.285 388.429 72.999 388.341 72.999C388.254 73 385.807 69.963 382.904 66.25C356.323 32.262 317.027 9.029 275 2.456C263.264 0.62 241.183 -0.125997 230.5 0.952003ZM119.777 210.557C123.917 213.456 122.303 223.985 117.715 224.014C113.444 224.04 111.154 225.215 110.016 227.962C109.385 229.486 108.713 237.658 108.524 246.122C108.069 266.446 105.723 272.603 96.551 277.542L93.252 279.319L97.876 282.41C101.182 284.619 103.311 287.122 105.347 291.192C108.073 296.644 108.209 297.593 108.574 313.692C108.784 322.937 109.227 331.741 109.559 333.258C110.253 336.428 112.631 338 116.734 338C120.839 338 122 339.69 122 345.665C122 352.038 120.642 353.076 112.145 353.196C101.773 353.343 96.067 349.971 92.352 341.5C90.958 338.32 90.484 333.502 90.039 318C89.371 294.702 88.51 291.938 80.766 288.238C75.61 285.774 74.648 283.91 75.18 277.405C75.473 273.828 75.92 273.29 80.5 271C88.336 267.082 89.27 264.289 90.039 242.5C90.848 219.544 92.488 215.019 101.5 210.881C106.578 208.549 116.656 208.37 119.777 210.557ZM490.509 210.439C495.336 212.456 497.591 214.822 500.106 220.506C502.014 224.819 502.36 227.881 502.892 245.136C503.48 264.175 503.581 264.926 505.91 267.405C507.235 268.815 509.807 270.248 511.624 270.589C515.633 271.341 516.651 272.469 517.346 276.924C518.329 283.225 517.165 285.833 512.436 287.925C509.237 289.34 507.551 290.948 505.893 294.166C503.906 298.019 503.581 300.608 502.959 317.5C502.232 337.251 501.548 340.613 496.943 347.079C495.783 348.709 493.241 350.708 491.295 351.521C486.987 353.321 473.912 353.512 472.2 351.8C471.54 351.14 471 348.305 471 345.5C471 339.593 472.178 338 476.545 338C482.71 338 483.427 335.929 484.106 316.146C484.572 302.597 485.129 297.455 486.507 294C489.018 287.703 492.502 283.303 496.669 281.165L500.231 279.338L496.982 277.993C492.585 276.171 488.279 272.415 486.249 268.631C484.917 266.146 484.46 261.651 484.035 246.855C483.422 225.492 483.002 224.339 475.642 223.802L471.5 223.5L471.193 217.528C470.949 212.761 471.239 211.298 472.635 210.278C474.998 208.549 486.228 208.651 490.509 210.439ZM362.124 221.731C369.166 224.846 370 226.155 370 234.103C370 238.884 369.594 241.219 368.703 241.561C367.989 241.834 364.382 240.688 360.687 239.012C344.488 231.667 331 235.069 331 246.5C331 253.023 333.547 255.304 349.497 263.066C370.733 273.401 376.672 280.835 375.795 295.985C375.275 304.958 372.553 311.447 366.965 317.035C355.467 328.533 331.768 331.14 315 322.752C309.192 319.846 308.409 319.097 307.642 315.713C306.679 311.462 307.582 303.376 309.127 302.421C309.683 302.078 313.37 303.427 317.319 305.421C330.741 312.195 344.379 312.389 350.601 305.894C353.062 303.326 353.5 302.059 353.5 297.515C353.5 290.279 351.337 288.152 337 281.285C322.22 274.206 316.287 269.756 312.49 262.899C309.828 258.092 309.5 256.568 309.5 249C309.5 238.802 311.966 232.96 318.818 226.929C323.25 223.028 332.373 219.35 339 218.794C345.601 218.24 357.708 219.777 362.124 221.731ZM178 221.302C188.093 221.563 191.407 222.032 195.212 223.739C202.673 227.087 206.673 230.88 209.582 237.363C211.91 242.549 212.184 244.233 211.786 250.893C211.485 255.929 210.619 259.884 209.225 262.595C206.786 267.335 201.1 272.642 196.323 274.639C194.495 275.402 193 276.26 193 276.544C193 276.828 194.592 278.459 196.538 280.168C200.848 283.951 203.801 288.876 209.113 301.134C216.7 318.644 218.175 323.084 216.91 324.609C215.386 326.445 199.097 326.559 196.785 324.75C195.907 324.063 193.059 318.1 190.457 311.5C181.433 288.616 177.538 283.12 170.173 282.881C168.153 282.816 165.375 282.703 164 282.631L161.5 282.5L161.239 303C161.011 320.842 160.76 323.662 159.298 324.75C157.098 326.387 142.826 326.426 141.2 324.8C139.426 323.026 139.474 223.677 141.25 222.218C143.019 220.765 146.217 220.454 156.5 220.734C161.45 220.869 171.125 221.124 178 221.302ZM294.498 221.996C295.381 223.425 295.443 232.094 294.589 234.75C293.871 236.981 293.704 237 274.433 237H255V250V263H271.465C289.979 263 290.014 263.015 289.986 270.684C289.955 279.436 290.903 279 271.883 279H255V294V309H274.3C287.978 309 293.95 309.35 294.8 310.2C296.271 311.671 296.387 321.409 294.965 324.066C293.98 325.907 292.592 326 266.187 326C242.697 326 238.104 325.761 236.223 324.443L234 322.887V273.143C234 235.787 234.299 223.101 235.2 222.2C236.738 220.662 293.552 220.466 294.498 221.996ZM459.779 222.75C461.001 225.74 460.577 234.6 459.128 236.346C457.976 237.734 455.601 238 444.378 238H431V280.965C431 330.376 432.02 326 420.5 326C408.98 326 410 330.376 410 280.965V238H396.029H382.057L381.199 234.75C380.337 231.486 380.573 223.5 381.579 221.872C381.876 221.392 399.431 221 420.59 221C456.291 221 459.114 221.126 459.779 222.75ZM161 252.122V267.245L169.801 266.824C183.759 266.157 189.994 261.493 189.998 251.718C190.003 241.182 184.332 237 170.04 237H161V252.122Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>REST</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 250 188\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M107.728 0.722006C109.503 0.943006 112.653 0.946009 114.728 0.730009C116.802 0.513009 115.35 0.333008 111.5 0.328008C107.65 0.324008 105.952 0.501006 107.728 0.722006ZM138.25 0.728002C140.313 0.944002 143.688 0.944002 145.75 0.728002C147.813 0.513002 146.125 0.336004 142 0.336004C137.875 0.336004 136.188 0.513002 138.25 0.728002ZM96.762 1.70701C98.006 1.94601 99.806 1.937 100.762 1.687C101.718 1.437 100.7 1.241 98.5 1.252C96.3 1.263 95.518 1.46801 96.762 1.70701ZM153.762 1.70701C155.006 1.94601 156.806 1.937 157.762 1.687C158.718 1.437 157.7 1.241 155.5 1.252C153.3 1.263 152.518 1.46801 153.762 1.70701ZM89.75 2.66201C90.438 2.94001 91.563 2.94001 92.25 2.66201C92.938 2.38501 92.375 2.158 91 2.158C89.625 2.158 89.063 2.38501 89.75 2.66201ZM161.269 2.69301C162.242 2.94701 163.592 2.93 164.269 2.656C164.946 2.382 164.15 2.17501 162.5 2.19501C160.85 2.21501 160.296 2.43901 161.269 2.69301ZM84.75 3.66201C85.438 3.94001 86.563 3.94001 87.25 3.66201C87.938 3.38501 87.375 3.158 86 3.158C84.625 3.158 84.063 3.38501 84.75 3.66201ZM166.75 3.66201C167.438 3.94001 168.563 3.94001 169.25 3.66201C169.938 3.38501 169.375 3.158 168 3.158C166.625 3.158 166.063 3.38501 166.75 3.66201ZM63.831 5.02301C56.055 6.33501 47.807 9.01501 41.904 12.146C31.36 17.739 0 48.773 0 53.614C0 54.353 4.494 58.863 9.987 63.636C18.496 71.031 20.27 73.106 21.974 77.66C29.065 96.611 37.894 104.998 40.52 95.276C41.187 92.806 41.475 93.293 43.134 99.696C44.522 105.053 46.244 108.537 49.872 113.331C52.975 117.43 55.186 121.605 55.957 124.823C57.393 130.807 61.849 138.2 65.437 140.551C67.57 141.948 68.004 143.007 68.022 146.865C68.054 153.383 70.049 155.372 79.5 158.301C87.272 160.71 99.942 163.652 104.987 164.22C106.996 164.446 107.586 165.197 108.06 168.131C108.43 170.424 108.159 172.43 107.323 173.573C103.075 179.383 111.428 186.542 116.792 181.688C119.569 179.175 126.554 180.565 129.096 184.135C131.841 187.989 137.185 188.174 139.593 184.498C140.495 183.122 140.996 181.093 140.707 179.988C140.418 178.883 140.66 176.713 141.244 175.166C142.649 171.442 141.582 167.584 138.772 166.23C136.596 165.181 136.631 165.133 139.619 165.068C150.67 164.828 178.178 157.393 181.25 153.816C182.325 152.564 183 150.132 183 147.508C183 143.808 183.464 142.883 186.478 140.585C190.613 137.431 194.271 131.415 196.314 124.406C197.131 121.605 199.862 116.3 202.383 112.617C204.904 108.935 207.712 103.358 208.623 100.223C209.989 95.526 210.417 94.894 211.056 96.623C212.331 100.069 214.707 100.196 218.332 97.013C221.326 94.385 223.611 90.137 229.489 76.275C230.762 73.275 233.992 69.713 240.64 63.982C252.552 53.714 252.589 53.332 242.75 42.289C232.291 30.551 215.614 15.606 209.101 12.134C201.236 7.94201 190.06 5.05 179.5 4.474C174.55 4.204 171.175 4.267 172 4.614C175.294 6.001 180.585 12.071 188.464 23.5C197.662 36.843 199.433 39.984 200.47 44.801L201.181 48.102L196.574 43.624C194.04 41.161 190.855 37.201 189.496 34.823L187.024 30.5L187.012 34.317C187.002 37.613 186.74 38.052 185.097 37.531C177.318 35.062 163.523 34.349 159.449 36.205C157.097 37.277 156.876 37.802 157.444 40.955C159.926 54.724 160.158 57.359 159.091 59.699C158.226 61.598 157.493 61.985 155.742 61.469C154.115 60.99 154.596 61.727 157.492 64.154C166.808 71.964 172.783 77.461 177.119 82.211C181.425 86.929 181.976 87.227 185.254 86.612C192.358 85.279 199.993 78.256 202.769 70.5L203.842 67.5L203.921 71.625C203.964 73.894 204.258 77.044 204.572 78.625C205.273 82.145 202.023 87.394 197.078 90.726C194.494 92.468 192.276 93.004 187.602 93.015C183.293 93.026 181.941 93.316 183 94C183.825 94.533 187.252 94.976 190.615 94.985C197.631 95.002 200.854 93.145 203.113 87.784L204.497 84.5L205.1 89.5C205.432 92.25 205.383 96.956 204.991 99.958C204.34 104.947 203.79 105.87 198.584 110.715C192.753 116.143 185.605 120.492 184.072 119.545C183.6 119.253 182.888 114.848 182.491 109.757C181.696 99.583 180.75 97.139 174.454 89C168.624 81.463 164.91 78.135 155 71.563C150.325 68.463 143.428 63.727 139.674 61.038C128.219 52.835 122.788 53.218 109.653 63.156C105.337 66.421 99.377 70.463 96.408 72.139C86.947 77.478 76.579 88.172 71.688 97.636C70.796 99.36 69.526 104.985 68.864 110.136C68.202 115.286 67.556 119.644 67.427 119.82C66.863 120.592 58.996 115.807 53.814 111.542C45.498 104.695 44.865 101.608 47.196 79.247C48.351 68.172 48.436 67.897 49.643 71.382C50.33 73.368 52.079 76.548 53.528 78.448C56.208 81.962 64.879 87 68.246 87C69.266 87 72.89 84.17 76.3 80.711C82.747 74.17 90.456 67.136 95.541 63.154C97.343 61.743 97.766 61.071 96.623 61.436C91.888 62.947 90.757 56.859 93.64 45.381C95.129 39.456 95.136 38.707 93.715 37.286C90.893 34.465 77.12 34.63 66.25 37.615C64.203 38.178 63.996 37.885 63.955 34.367L63.91 30.5L61.705 34.61C59.21 39.26 51 48.879 51 47.152C51 46.53 51.822 43.857 52.827 41.213C54.9 35.757 73.076 8.761 76.104 6.64C77.855 5.414 77.897 5.17501 76.463 4.62401C74.446 3.85001 69.937 3.99301 63.831 5.02301ZM79.75 4.66201C80.438 4.94001 81.563 4.94001 82.25 4.66201C82.938 4.38501 82.375 4.158 81 4.158C79.625 4.158 79.063 4.38501 79.75 4.66201ZM118.057 27.074C115.723 28.764 114.052 30.385 114.342 30.676C114.633 30.966 115.912 30.472 117.185 29.577C122.81 25.624 132.82 25.669 136.134 29.662C136.745 30.398 137.71 31 138.277 31C139.815 31 135.91 27.005 132.802 25.398C128.206 23.021 122.804 23.635 118.057 27.074ZM89 28.286C89.275 28.563 92.85 29.305 96.945 29.934C106.693 31.433 107.312 32.016 106.791 39.21C106.561 42.394 106.484 45 106.62 45C106.756 45 109.214 43.541 112.083 41.758C116.836 38.803 117.989 38.521 125.068 38.58C131.698 38.635 133.782 39.11 139.291 41.822C142.841 43.57 145.978 45 146.261 45C146.545 45 147.08 43.385 147.451 41.411C148.929 33.529 152.486 30 158.95 30C160.628 30 162 29.55 162 29C162 27.692 157.497 27.734 152.622 29.088C147.791 30.429 144 34.108 144 37.455C144 38.855 143.86 40 143.688 40C143.516 40 141.379 39.009 138.938 37.797C133.491 35.094 120.573 34.741 115 37.142C111.5 38.65 111.5 38.65 110.5 35.669C108.808 30.623 104.925 28.584 96.199 28.158C91.965 27.951 88.725 28.009 89 28.286ZM118.855 45.912C114.371 47.368 104.284 53.069 102.127 55.364C100.494 57.103 101.682 56.766 108.014 53.696C121.555 47.13 133.933 47.559 147.921 55.079C153.146 57.888 153.259 57.905 151.056 55.56C149.8 54.222 145.594 51.458 141.712 49.418C136.066 46.451 133.335 45.642 128.076 45.38C124.459 45.2 120.31 45.439 118.855 45.912ZM79.8 52.2C83.194 55.594 79.203 61.249 75 59C71.47 57.111 72.998 51 77 51C77.88 51 79.14 51.54 79.8 52.2ZM178.8 52.2C182.194 55.594 178.203 61.249 174 59C170.47 57.111 171.998 51 176 51C176.88 51 178.14 51.54 178.8 52.2ZM48.379 84.571C49.749 88.188 53.459 92.888 55.779 93.945C58.669 95.262 66.994 95.297 69 94C70.055 93.319 68.589 93.026 64.066 93.015L57.632 93L52.641 87.821C49.895 84.973 47.977 83.51 48.379 84.571ZM116.655 165.543C117.409 167.509 116.517 168.412 114.56 167.661C113.681 167.324 113.284 166.423 113.624 165.538C114.382 163.562 115.896 163.565 116.655 165.543ZM123 167C123 167.55 122.577 168 122.059 168C121.541 168 120.84 167.55 120.5 167C120.16 166.45 120.584 166 121.441 166C122.298 166 123 166.45 123 167ZM132 167.5C130.669 169.104 128 169.549 128 168.167C128 166.798 129.212 166 131.289 166C132.914 166 133.034 166.254 132 167.5ZM137 182.083C137 184.52 134.663 184.176 134.177 181.667C133.985 180.68 134.495 180 135.427 180C136.354 180 137 180.855 137 182.083Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>Pug</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 171 64\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M110.5 1.21178C102.786 4.23078 100 7.80979 100 14.7008C100 21.8548 104.644 25.6438 116.801 28.4088C124.712 30.2078 126.699 31.7108 125.105 34.6898C122.972 38.6748 114.216 38.4758 105.783 34.2498C103.189 32.9498 100.827 31.8858 100.533 31.8858C100.24 31.8858 100 34.3188 100 37.2918V42.6978L104.678 44.2918C107.35 45.2018 112.627 45.8858 116.982 45.8858C129.814 45.8858 138 40.2568 138 31.4318C138 23.6328 132.929 19.3348 120.882 16.9238C113.511 15.4478 111.376 13.9198 112.846 11.1728C114.917 7.30379 123.624 7.23578 131.21 11.0298C133.251 12.0508 135.163 12.8858 135.46 12.8858C135.757 12.8858 136 10.4478 136 7.46879V2.05179L130.951 0.968787C124.486 -0.418213 114.357 -0.297217 110.5 1.21178ZM5 22.8858V44.8858H20.5H36V40.8858V36.8858H26H16V30.8858V24.8858H25.5H35V20.8858V16.8858H25.5H16V12.8858V8.88579H26H36V4.88579V0.885787H20.5H5V22.8858ZM59 4.88579V8.88579H64.082H69.163L68.832 21.3528C68.425 36.6398 67.906 37.4728 58.959 37.2118L53 37.0378V41.4618V45.8858H61.099C70.554 45.8858 75.289 44.0998 78.114 39.4658C79.765 36.7588 79.993 34.2378 79.996 18.6358L80 0.885787H69.5H59V4.88579ZM43.116 57.2058C43.009 61.6588 43.171 62.0008 45.25 61.7058C48.305 61.2718 48.998 56.9598 46.133 56.2098C45.019 55.9188 43.91 54.9388 43.67 54.0328C43.429 53.1268 43.18 54.5548 43.116 57.2058ZM61 54.2688C61 55.0298 60.1 55.8878 59 56.1758C57.649 56.5288 57 57.5398 57 59.2918C57 61.3918 57.476 61.8858 59.5 61.8858C61.796 61.8858 62 61.5188 62 57.3858C62 54.9108 61.775 52.8858 61.5 52.8858C61.225 52.8858 61 53.5088 61 54.2688ZM68 54.2688C68 55.0298 67.1 55.8878 66 56.1758C64.649 56.5288 64 57.5398 64 59.2918C64 61.3918 64.476 61.8858 66.5 61.8858C68.796 61.8858 69 61.5188 69 57.3858C69 54.9108 68.775 52.8858 68.5 52.8858C68.225 52.8858 68 53.5088 68 54.2688ZM82 54.2688C82 55.0298 81.064 55.8968 79.921 56.1958C77.008 56.9578 77.657 61.2658 80.75 61.7058C82.802 61.9968 83 61.6218 83 57.4558C83 54.9418 82.775 52.8858 82.5 52.8858C82.225 52.8858 82 53.5088 82 54.2688ZM9 55.8858C9 57.2408 9.667 57.8858 11.067 57.8858C12.68 57.8858 12.995 58.3258 12.5 59.8858C11.629 62.6288 12.849 62.4208 13.969 59.6358L14.873 57.3858L14.937 59.6358C15.02 62.6078 19 62.8528 19 59.8858C19 58.5308 18.333 57.8858 16.933 57.8858C15.32 57.8858 15.005 57.4458 15.5 55.8858C16.371 53.1428 15.151 53.3508 14.031 56.1358L13.127 58.3858L13.063 56.1358C12.98 53.1638 9 52.9188 9 55.8858ZM25 57.8858C25 61.6158 25.186 61.8768 27.75 61.7498C30.108 61.6328 30.179 61.5518 28.25 61.1798C27.012 60.9418 26 60.1338 26 59.3858C26 58.6378 27.012 57.8298 28.25 57.5918L30.5 57.1578L28.25 57.0218C27.012 56.9468 26 56.4668 26 55.9558C26 55.4438 27.012 54.8298 28.25 54.5918C30.179 54.2198 30.108 54.1388 27.75 54.0218C25.186 53.8948 25 54.1558 25 57.8858ZM89.75 54.5478C91.609 55.2978 91.262 59.6338 89.25 60.8058C87.687 61.7158 87.741 61.8278 89.75 61.8558C91.713 61.8818 92 61.3758 92 57.8858C92 54.7128 91.638 53.9018 90.25 53.9648C89.205 54.0118 89.003 54.2468 89.75 54.5478ZM115 55.8668C115 57.1448 115.885 58.0698 117.493 58.4738C118.864 58.8178 119.726 59.5198 119.409 60.0328C119.091 60.5468 117.97 60.6938 116.916 60.3588C115.797 60.0038 115 60.2228 115 60.8848C115 61.5308 116.179 61.8828 117.741 61.7018C121.435 61.2758 122.022 58.1808 118.573 57.3148C117.166 56.9618 116.274 56.2518 116.591 55.7388C116.909 55.2248 118.03 55.0778 119.084 55.4128C120.155 55.7528 121 55.5498 121 54.9528C121 54.3658 119.65 53.8858 118 53.8858C115.676 53.8858 115 54.3328 115 55.8668ZM143.77 55.0748C143.02 57.3268 144.259 61.8858 145.622 61.8858C146.77 61.8858 146.795 61.5268 145.758 59.8548C144.828 58.3548 144.797 57.6368 145.639 57.1048C146.471 56.5808 146.423 56.0558 145.463 55.1648C144.511 54.2828 144.043 54.2578 143.77 55.0748ZM152 55.8858C152 57.2408 152.667 57.8858 154.067 57.8858C155.68 57.8858 155.995 58.3258 155.5 59.8858C154.42 63.2868 155.889 62.0888 157.487 58.2638C159.373 53.7498 159.367 52.8168 157.468 55.3268C156.188 57.0198 156 57.0518 156 55.5768C156 54.5528 155.212 53.8858 154 53.8858C152.667 53.8858 152 54.5528 152 55.8858ZM2.75 56.5058C1.238 57.2998 0 58.1488 0 58.3918C0 58.6358 1.35 59.5328 3 60.3858C4.796 61.3148 6 61.5128 6 60.8798C6 60.2988 5.31199 59.5588 4.47099 59.2358C3.14999 58.7288 3.18299 58.4718 4.71899 57.3488C7.33899 55.4338 5.936 54.8328 2.75 56.5058ZM12 55.8858C12 56.4358 11.802 56.8858 11.559 56.8858C11.316 56.8858 10.84 56.4358 10.5 55.8858C10.16 55.3358 10.359 54.8858 10.941 54.8858C11.523 54.8858 12 55.3358 12 55.8858ZM155 55.8858C155 56.4358 154.523 56.8858 153.941 56.8858C153.359 56.8858 153.16 56.4358 153.5 55.8858C153.84 55.3358 154.316 54.8858 154.559 54.8858C154.802 54.8858 155 55.3358 155 55.8858ZM165 55.8108C165 56.3468 165.724 57.1918 166.609 57.6868C168.089 58.5148 168.089 58.6378 166.609 59.2058C165.724 59.5448 165 60.2988 165 60.8798C165 61.5128 166.204 61.3148 168 60.3858C169.65 59.5328 171 58.6328 171 58.3858C171 58.1388 169.65 57.2388 168 56.3858C166.35 55.5328 165 55.2738 165 55.8108ZM32.1 59.1358C32.185 61.9058 32.295 62.0448 32.85 60.0768C33.682 57.1218 35.382 57.1328 35.903 60.0958L36.305 62.3858L36.903 60.0768C37.231 58.8068 37.95 57.7678 38.5 57.7678C39.05 57.7678 39.793 58.8068 40.15 60.0768C40.705 62.0448 40.815 61.9058 40.9 59.1358C40.998 55.9358 40.931 55.8858 36.5 55.8858C32.069 55.8858 32.002 55.9358 32.1 59.1358ZM50.362 57.3858C49.469 59.7128 50.727 61.8858 52.969 61.8858C54.086 61.8858 55 61.4498 55 60.9168C55 60.3848 54.371 60.1898 53.601 60.4858C52.832 60.7808 51.905 60.5418 51.542 59.9538C51.156 59.3288 51.735 58.8858 52.941 58.8858C54.105 58.8858 55 58.2338 55 57.3858C55 56.5448 54.108 55.8858 52.969 55.8858C51.851 55.8858 50.678 56.5608 50.362 57.3858ZM71.362 57.3858C70.469 59.7128 71.727 61.8858 73.969 61.8858C75.086 61.8858 76 61.4498 76 60.9168C76 60.3848 75.371 60.1898 74.601 60.4858C73.832 60.7808 72.905 60.5418 72.542 59.9538C72.156 59.3288 72.735 58.8858 73.941 58.8858C75.105 58.8858 76 58.2338 76 57.3858C76 56.5448 75.108 55.8858 73.969 55.8858C72.851 55.8858 71.678 56.5608 71.362 57.3858ZM95.834 56.7618C96.908 57.4428 96.859 57.7258 95.584 58.2148C93.008 59.2038 93.677 61.8858 96.5 61.8858C98.611 61.8858 99 61.4188 99 58.8858C99 56.4368 98.587 55.8888 96.75 55.9008C95.136 55.9118 94.877 56.1558 95.834 56.7618ZM101.032 56.9448C101.014 57.8018 101.616 59.3458 102.368 60.3748C103.689 62.1808 103.779 62.1678 104.933 60.0108C105.591 58.7808 105.928 57.2378 105.681 56.5808C105.399 55.8278 104.961 56.0448 104.498 57.1648C103.794 58.8708 103.708 58.8708 102.414 57.1648C101.281 55.6718 101.058 55.6368 101.032 56.9448ZM109.834 56.7618C110.908 57.4428 110.859 57.7258 109.584 58.2148C107.008 59.2038 107.677 61.8858 110.5 61.8858C112.611 61.8858 113 61.4188 113 58.8858C113 56.4368 112.587 55.8888 110.75 55.9008C109.136 55.9118 108.877 56.1558 109.834 56.7618ZM123.362 57.3858C122.469 59.7128 123.727 61.8858 125.969 61.8858C127.086 61.8858 128 61.4858 128 60.9968C128 60.5078 127.212 60.1708 126.25 60.2468C125.288 60.3238 124.5 59.7108 124.5 58.8858C124.5 58.0608 125.288 57.4488 126.25 57.5248C127.212 57.6008 128 57.2638 128 56.7748C128 55.2648 123.972 55.7958 123.362 57.3858ZM129.116 59.3488C129.195 61.4138 129.382 61.7458 129.7 60.3858C129.958 59.2858 130.859 57.8468 131.703 57.1888C133.024 56.1578 132.943 56.0148 131.118 56.1518C129.432 56.2788 129.024 56.9308 129.116 59.3488ZM134.232 58.8858C134.232 60.8108 134.438 61.5988 134.689 60.6358C134.941 59.6728 134.941 58.0988 134.689 57.1358C134.438 56.1728 134.232 56.9608 134.232 58.8858ZM137.015 60.1358C137.024 62.4738 137.361 63.9028 137.765 63.3128C138.169 62.7228 139.288 61.9498 140.25 61.5938C141.286 61.2118 142 59.9158 142 58.4168C142 56.3838 141.508 55.8858 139.5 55.8858C137.223 55.8858 137.001 56.2648 137.015 60.1358ZM46.217 60.0688C44.689 61.5968 43.562 60.4698 44.409 58.2618C44.909 56.9578 45.343 56.8288 46.233 57.7188C47.122 58.6078 47.119 59.1668 46.217 60.0688ZM61 58.3268C61 59.1198 60.581 60.0268 60.069 60.3428C58.88 61.0778 57.684 59.2058 58.5 57.8858C59.42 56.3978 61 56.6768 61 58.3268ZM68 58.3268C68 59.1198 67.581 60.0268 67.069 60.3428C65.88 61.0778 64.684 59.2058 65.5 57.8858C66.42 56.3978 68 56.6768 68 58.3268ZM82 58.3268C82 59.1198 81.581 60.0268 81.069 60.3428C79.88 61.0778 78.684 59.2058 79.5 57.8858C80.42 56.3978 82 56.6768 82 58.3268ZM140.217 60.0688C138.689 61.5968 137.562 60.4698 138.409 58.2618C138.909 56.9578 139.343 56.8288 140.233 57.7188C141.122 58.6078 141.119 59.1668 140.217 60.0688ZM158 59.8858C158 61.2188 158.667 61.8858 160 61.8858C161.333 61.8858 162 61.2188 162 59.8858C162 58.5528 161.333 57.8858 160 57.8858C158.667 57.8858 158 58.5528 158 59.8858ZM17.5 59.8858C17.84 60.4358 17.641 60.8858 17.059 60.8858C16.477 60.8858 16 60.4358 16 59.8858C16 59.3358 16.198 58.8858 16.441 58.8858C16.684 58.8858 17.16 59.3358 17.5 59.8858ZM97.5 59.8858C97.16 60.4358 96.432 60.8858 95.882 60.8858C95.332 60.8858 95.16 60.4358 95.5 59.8858C95.84 59.3358 96.568 58.8858 97.118 58.8858C97.668 58.8858 97.84 59.3358 97.5 59.8858ZM112 59.3268C112 59.5698 111.55 60.0458 111 60.3858C110.45 60.7258 110 60.5268 110 59.9448C110 59.3628 110.45 58.8858 111 58.8858C111.55 58.8858 112 59.0838 112 59.3268Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>EJS</p>\n                </div>\n              </li>\n            </ul>\n          </StyledListContainer>\n          <StyledListContainer className=\"misc\">\n            <h4>Miscellaneous</h4>\n            <ul>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 493 616\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M218.424 0.231899C218.191 0.460899 215.975 0.767906 213.5 0.913906C211.025 1.05891 207.785 1.7749 206.3 2.5039C204.814 3.2329 201.638 3.82991 199.241 3.82991C196.844 3.82991 194.009 4.49091 192.941 5.29791C191.85 6.12291 188.798 6.77991 185.973 6.79791C182.97 6.81691 179.998 7.4929 178.595 8.4759C177.303 9.3809 174.39 10.3199 172.123 10.5609C169.855 10.8029 167.5 11.6369 166.89 12.4149C166.279 13.1929 164.467 13.8299 162.862 13.8299C161.258 13.8299 159.057 14.4479 157.973 15.2019C156.888 15.9569 154.575 16.8839 152.834 17.2629C151.092 17.6419 149.419 18.5999 149.115 19.3909C148.81 20.1869 147.262 20.8299 145.654 20.8299C144.054 20.8299 142.185 21.5049 141.5 22.3299C140.815 23.1549 139.471 23.8299 138.512 23.8299C137.554 23.8299 135.626 24.7299 134.227 25.8299C132.829 26.9299 131.248 27.8299 130.715 27.8299C130.181 27.8299 129.185 28.5049 128.5 29.3299C127.815 30.1549 126.396 30.8299 125.346 30.8299C124.296 30.8299 123.178 31.5049 122.862 32.3299C122.545 33.1549 121.434 33.8299 120.393 33.8299C119.352 33.8299 117.683 34.6179 116.685 35.5799C115.687 36.5419 113.135 38.2299 111.014 39.3299C108.893 40.4299 105.651 42.7919 103.811 44.5799C101.97 46.3669 99.818 47.8299 99.03 47.8299C98.241 47.8299 96.067 49.4049 94.197 51.3299C92.328 53.2549 90.281 54.8299 89.649 54.8299C89.017 54.8299 88.5 55.5049 88.5 56.3299C88.5 57.1549 87.975 57.8299 87.334 57.8299C85.833 57.8299 84.887 58.6619 73.5 69.9929C64.113 79.3339 54.5 89.6329 54.5 90.3489C54.5 90.5529 52.927 92.4309 51.005 94.5239C49.082 96.6169 47.507 98.8669 47.505 99.5239C47.502 100.181 45.97 102.389 44.099 104.431C42.228 106.473 39.722 110.098 38.529 112.487C37.336 114.876 35.985 116.83 35.528 116.83C35.07 116.83 34.188 118.068 33.567 119.58C32.122 123.101 30.038 126.692 28.616 128.114C28.002 128.728 27.49 129.928 27.478 130.78C27.466 131.633 26.576 133.455 25.5 134.83C24.424 136.205 23.534 138.287 23.522 139.458C23.51 140.628 22.825 142.145 22 142.83C21.175 143.515 20.5 144.865 20.5 145.83C20.5 146.795 19.837 148.135 19.026 148.808C18.216 149.481 17.269 151.545 16.922 153.395C16.575 155.245 15.663 157.28 14.895 157.917C14.128 158.554 13.5 160.834 13.5 162.984C13.5 165.374 12.967 167.097 12.128 167.419C11.373 167.709 10.481 169.952 10.145 172.405C9.80899 174.858 8.851 178.184 8.017 179.798C7.183 181.411 6.484 183.991 6.465 185.53C6.445 187.07 5.786 189.455 5 190.83C4.153 192.313 3.556 196.147 3.535 200.251C3.509 205.403 3.053 207.667 1.75 209.106C0.095 210.934 0 222.069 0 413.185V615.33L123.73 615.584L247.46 615.838L248.014 613.584C248.319 612.344 248.441 584.892 248.284 552.58L248 493.83L253 493.792C270.457 493.662 285.075 492.326 286.036 490.772C286.356 490.254 288.871 489.83 291.625 489.83C294.378 489.83 297.614 489.293 298.816 488.636C300.017 487.98 303.614 487.126 306.808 486.739C310.003 486.351 313.413 485.313 314.387 484.432C315.42 483.498 317.909 482.83 320.36 482.83C323.173 482.83 324.753 482.334 325.138 481.33C325.484 480.429 326.992 479.83 328.916 479.83C330.677 479.83 332.991 479.169 334.059 478.362C335.126 477.554 336.788 476.879 337.75 476.862C338.712 476.844 340.4 475.93 341.5 474.83C342.6 473.73 344.443 472.83 345.596 472.83C346.748 472.83 348.886 472.206 350.346 471.443C351.806 470.68 354.125 469.558 355.5 468.95C356.875 468.342 358.788 467.391 359.75 466.837C360.712 466.283 362.288 465.379 363.25 464.828C364.212 464.276 366.013 463.387 367.25 462.852C368.487 462.317 369.5 461.454 369.5 460.934C369.5 460.414 370.847 459.693 372.494 459.331C374.141 458.97 375.828 458.137 376.244 457.481C376.66 456.825 378.125 455.738 379.5 455.066C383.429 453.146 385.932 451.437 386.8 450.08C387.24 449.393 388.204 448.83 388.943 448.83C389.682 448.83 390.545 448.155 390.862 447.33C391.178 446.505 392.096 445.83 392.902 445.83C393.708 445.83 396.677 443.58 399.5 440.83C402.323 438.08 405.067 435.83 405.598 435.83C406.129 435.83 406.828 435.138 407.153 434.293C407.477 433.448 408.925 432.143 410.371 431.393C413.229 429.911 421.779 421.711 427.754 414.722C429.818 412.306 432.181 409.617 433.004 408.746C433.827 407.875 434.5 406.889 434.5 406.555C434.5 406.221 436.75 403.601 439.5 400.733C442.25 397.865 444.5 395.063 444.5 394.508C444.5 393.952 445.154 392.785 445.954 391.914C446.753 391.043 448.328 389.317 449.454 388.08C450.579 386.843 451.5 385.21 451.5 384.452C451.5 383.695 452.175 382.515 453 381.83C453.825 381.145 454.5 379.981 454.5 379.243C454.5 378.504 455.4 377.419 456.5 376.83C457.632 376.224 458.5 374.736 458.5 373.402C458.5 372.105 459.175 370.785 460 370.468C460.825 370.152 461.5 369.034 461.5 367.984C461.5 366.934 462.146 365.539 462.935 364.884C464.7 363.419 468.5 356.265 468.5 354.406C468.5 353.657 469.111 352.809 469.858 352.523C470.606 352.236 471.502 350.221 471.85 348.046C472.197 345.87 473.161 343.526 473.991 342.837C474.821 342.149 475.5 340.483 475.5 339.136C475.5 337.789 476.175 336.012 477 335.187C477.825 334.362 478.5 332.626 478.5 331.33C478.5 330.034 479.18 328.293 480.011 327.462C480.842 326.631 481.818 323.791 482.18 321.15C482.542 318.51 483.437 315.75 484.169 315.018C484.972 314.215 485.5 311.379 485.5 307.866C485.5 303.781 485.92 301.883 486.908 301.504C487.864 301.137 488.538 298.448 489.004 293.147C489.382 288.847 490.33 283.382 491.11 281.002C492.205 277.663 492.53 269.952 492.532 247.247C492.535 219.413 492.211 213.687 490.497 211.33C490.097 210.78 489.465 206.52 489.093 201.863C488.681 196.697 487.848 192.767 486.958 191.784C486.082 190.815 485.5 188.138 485.5 185.073C485.5 181.873 484.941 179.414 484 178.473C483.175 177.648 482.5 175.697 482.5 174.137C482.5 172.577 481.6 169.621 480.5 167.569C479.4 165.516 478.5 163.022 478.5 162.025C478.5 161.028 477.839 159.339 477.032 158.271C476.224 157.204 475.549 155.078 475.532 153.549C475.514 152.018 474.823 150.507 473.994 150.189C473.166 149.872 472.207 147.851 471.863 145.699C471.519 143.547 470.875 141.562 470.432 141.288C469.989 141.014 468.414 138.212 466.933 135.06C465.452 131.909 463.623 128.97 462.87 128.53C462.116 128.09 461.5 126.628 461.5 125.28C461.5 123.769 460.925 122.83 460 122.83C459.068 122.83 458.5 121.886 458.5 120.338C458.5 118.93 457.631 117.304 456.5 116.598C455.4 115.911 454.5 114.605 454.5 113.696C454.5 112.788 453.825 111.785 453 111.468C452.175 111.152 451.5 110.079 451.5 109.084C451.5 108.089 450.712 106.551 449.75 105.666C447.182 103.305 444.5 99.5779 444.5 98.3699C444.5 97.7899 442.925 95.8709 441 94.1039C439.075 92.3369 437.5 90.4279 437.5 89.8609C437.5 89.2939 436.825 88.8299 436 88.8299C435.175 88.8299 434.5 88.3139 434.5 87.6829C434.5 87.0519 432.813 84.4649 430.752 81.9329C426.294 76.4579 411.504 61.8299 410.427 61.8299C410.011 61.8299 408.05 60.2549 406.068 58.3299C404.085 56.4049 402.217 54.8299 401.915 54.8299C401.613 54.8299 399.88 53.2549 398.065 51.3299C396.249 49.4049 394.129 47.8299 393.354 47.8299C392.579 47.8299 391.24 47.0419 390.378 46.0799C389.516 45.1179 387.789 43.6549 386.54 42.8299C385.291 42.0049 383.237 40.5419 381.977 39.5799C380.716 38.6179 378.968 37.8299 378.092 37.8299C377.217 37.8299 376.5 37.1749 376.5 36.3749C376.5 35.5049 375.095 34.6569 373 34.2639C371.075 33.9029 369.5 33.2319 369.5 32.7729C369.5 31.9619 366.405 30.0259 361.675 27.8779C360.396 27.2969 358.676 26.1489 357.853 25.3259C357.03 24.5029 355.319 23.8299 354.051 23.8299C352.783 23.8299 351.185 23.1549 350.5 22.3299C349.815 21.5049 348.06 20.8299 346.6 20.8299C345.139 20.8299 343.174 19.9299 342.232 18.8299C341.29 17.7299 339.428 16.8299 338.093 16.8299C336.759 16.8299 335.507 16.3509 335.312 15.7649C335.117 15.1799 332.942 14.4319 330.478 14.1039C328.015 13.7759 325.55 12.9309 325 12.2269C324.45 11.5229 322.024 10.6639 319.609 10.3189C317.194 9.9739 314.575 9.04791 313.788 8.26091C312.926 7.39891 310.299 6.81691 307.179 6.79791C304.22 6.77991 301.168 6.13691 300.059 5.29791C298.972 4.47591 295.985 3.82991 293.274 3.82991C290.344 3.82991 287.374 3.13791 285.759 2.07991C283.378 0.519906 279.604 0.301902 250.968 0.0729024C233.302 -0.0690976 218.657 0.00289899 218.424 0.231899ZM259.043 126.946C261.22 127.496 264.8 128.165 267 128.433C269.2 128.702 272.8 129.542 275 130.3C277.2 131.057 280.575 131.994 282.5 132.382C284.425 132.769 286.888 133.703 287.973 134.458C289.057 135.212 291.147 135.83 292.616 135.83C294.084 135.83 295.529 136.463 295.825 137.236C296.122 138.009 297.745 138.945 299.432 139.315C301.12 139.686 302.5 140.304 302.5 140.69C302.5 141.076 303.737 141.949 305.25 142.631C310.183 144.854 313.5 146.922 313.5 147.776C313.5 148.237 314.671 148.907 316.103 149.267C318.859 149.958 341.957 172.581 343.62 176.217C345.248 179.779 346.932 182.404 348.756 184.229C349.715 185.188 350.5 186.793 350.5 187.794C350.5 188.796 351.175 189.875 352 190.192C352.825 190.508 353.5 191.851 353.5 193.176C353.5 194.501 354.175 196.145 355 196.83C355.825 197.515 356.5 198.859 356.5 199.818C356.5 200.776 357.4 202.704 358.5 204.103C359.695 205.622 360.5 208.16 360.5 210.409C360.5 212.479 361.125 214.883 361.889 215.751C362.728 216.705 363.509 220.813 363.862 226.133C364.184 230.975 364.725 235.385 365.064 235.934C366.056 237.539 366.31 251.121 365.394 253.572C364.933 254.805 364.271 260.205 363.924 265.572C363.527 271.696 362.772 275.918 361.896 276.909C361.128 277.777 360.5 280.49 360.5 282.936C360.5 286.148 359.944 287.862 358.5 289.098C357.4 290.04 356.5 291.954 356.5 293.352C356.5 294.749 355.825 296.152 355 296.468C354.145 296.796 353.5 298.288 353.5 299.937C353.5 301.528 353.056 302.83 352.513 302.83C351.971 302.83 350.855 304.292 350.034 306.08C348.007 310.49 346.247 313.172 344.75 314.13C344.063 314.57 343.5 315.543 343.5 316.294C343.5 317.044 341.925 319.28 340 321.262C338.075 323.245 336.5 325.308 336.5 325.848C336.5 326.388 335.825 326.83 335 326.83C334.175 326.83 333.5 327.475 333.5 328.263C333.5 329.051 332.6 329.981 331.5 330.33C330.4 330.679 329.5 331.406 329.5 331.945C329.5 332.912 326.987 335.418 322.094 339.33C320.718 340.43 319.572 341.893 319.546 342.58C319.521 343.268 318.523 343.83 317.329 343.83C316.135 343.83 314.331 344.578 313.322 345.491C311.333 347.291 308.302 349.155 304.75 350.762C303.513 351.322 302.5 352.242 302.5 352.805C302.5 353.369 301.7 353.83 300.723 353.83C299.745 353.83 297.92 354.548 296.666 355.426C295.413 356.304 292.95 357.244 291.194 357.515C289.437 357.787 287.325 358.584 286.5 359.286C285.675 359.989 282.988 360.87 280.53 361.244C278.071 361.618 275.821 362.293 275.53 362.744C275.238 363.195 272.375 363.846 269.166 364.19C265.958 364.534 262.979 365.034 262.547 365.301C262.115 365.568 259.34 366.038 256.38 366.344C253.421 366.651 249.538 367.131 247.75 367.411L244.5 367.921V428.875V489.83H185H125.5L125.532 361.58C125.559 250.397 125.759 233.072 127.032 231.389C127.951 230.173 128.5 227.161 128.5 223.33C128.5 219.499 129.049 216.487 129.968 215.271C130.776 214.204 131.454 212.205 131.475 210.83C131.496 209.455 132.407 206.98 133.5 205.33C134.593 203.68 135.49 201.141 135.493 199.687C135.497 198.233 136.175 196.785 137 196.468C137.877 196.132 138.5 194.633 138.5 192.861C138.5 190.909 139.006 189.83 139.921 189.83C140.702 189.83 141.638 188.48 142 186.83C142.362 185.18 143.084 183.83 143.604 183.83C144.124 183.83 144.977 182.705 145.5 181.33C146.023 179.955 146.912 178.83 147.475 178.83C148.039 178.83 148.5 178.247 148.5 177.533C148.5 176.113 151.003 172.52 153.75 169.994C154.712 169.109 155.5 167.811 155.5 167.108C155.5 166.405 155.94 165.83 156.478 165.83C157.017 165.83 161.068 162.238 165.482 157.848C169.895 153.458 174.63 149.584 176.003 149.24C177.376 148.895 178.5 148.237 178.5 147.776C178.5 146.995 180.354 145.805 186.5 142.641C187.875 141.933 189.595 140.786 190.321 140.092C191.048 139.398 192.525 138.83 193.603 138.83C194.681 138.83 195.822 138.155 196.138 137.33C196.455 136.505 197.903 135.827 199.357 135.823C200.811 135.82 203.35 134.923 205 133.83C206.65 132.737 209.373 131.84 211.05 131.837C212.727 131.833 214.537 131.393 215.072 130.858C215.606 130.324 219.137 129.448 222.917 128.913C226.697 128.378 230.205 127.525 230.712 127.018C231.968 125.762 254.13 125.706 259.043 126.946Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n                  <p>PassportJs</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                    <path d=\"M439.55 236.05L244 40.45a28.87 28.87 0 0 0-40.81 0l-40.66 40.63 51.52 51.52c27.06-9.14 52.68 16.77 43.39 43.68l49.66 49.66c34.23-11.8 61.18 31 35.47 56.69-26.49 26.49-70.21-2.87-56-37.34L240.22 199v121.85c25.3 12.54 22.26 41.85 9.08 55a34.34 34.34 0 0 1-48.55 0c-17.57-17.6-11.07-46.91 11.25-56v-123c-20.8-8.51-24.6-30.74-18.64-45L142.57 101 8.45 235.14a28.86 28.86 0 0 0 0 40.81l195.61 195.6a28.86 28.86 0 0 0 40.8 0l194.69-194.69a28.86 28.86 0 0 0 0-40.81z\" />\n                  </svg>\n                  <p>git</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\">\n                    <path d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\" />\n                  </svg>\n                  <p>github</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n                    <path d=\"M288 288h-32v-64h32v64zm288-128v192H288v32H160v-32H0V160h576zm-416 32H32v128h64v-96h32v96h32V192zm160 0H192v160h64v-32h64V192zm224 0H352v128h64v-96h32v96h32v-96h32v96h32V192z\" />\n                  </svg>\n                  <p>npm</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg\n                    viewBox=\"0 0 175 193\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M43.323 22.296C21.776 34.519 3.925 44.742 3.654 45.012C3.383 45.283 9.641 49.25 17.559 53.828L31.956 62.152L57.978 47.897L84 33.643V16.821C84 7.57001 83.662 0.0160089 83.25 0.0350089C82.838 0.0550089 64.87 10.072 43.323 22.296ZM90.225 16.649L90.5 33.454L111 44.785C122.275 51.017 134.03 57.472 137.123 59.13L142.746 62.143L156.873 53.968C164.643 49.472 170.984 45.502 170.964 45.147C170.923 44.407 93.516 0.67201 91.363 0.17201C90.182 -0.10299 89.996 2.58901 90.225 16.649ZM63.016 51.993C50.1 59.095 39.431 65.264 39.307 65.702C39.184 66.141 49.936 72.704 63.201 80.287L87.319 94.074L109.631 81.287C121.903 74.254 132.866 67.816 133.993 66.98C135.938 65.537 134.83 64.793 112.411 52.48C99.413 45.341 88.266 39.406 87.639 39.291C87.013 39.176 75.932 44.892 63.016 51.993ZM0 97.415C0 123.037 0.178 144 0.395 144C0.611 144 7.136 140.364 14.895 135.921L29 127.841V97.634V67.426L18.75 61.528C13.112 58.284 6.587 54.55 4.25 53.229L0 50.829V97.415ZM159.5 59.402L145.5 67.631L145.235 97.237L144.97 126.843L147.735 128.74C151.625 131.409 173.597 144 174.365 144C174.714 144 175 123.075 175 97.5C175 71.925 174.662 51.039 174.25 51.086C173.838 51.134 167.2 54.876 159.5 59.402ZM35.021 98.25L35.043 124.5L53.271 134.474C63.297 139.96 74.313 145.953 77.75 147.791L84 151.134V125.166V99.199L60.399 85.599C47.419 78.12 36.394 72 35.899 72C35.389 72 35.009 83.365 35.021 98.25ZM113.766 85.783L90.031 99.5L90.016 125.25C90.007 139.412 90.275 151 90.611 151C90.946 151 101.971 145.104 115.111 137.898L139 124.796V98.398C139 83.879 138.662 72.015 138.25 72.033C137.838 72.05 126.82 78.238 113.766 85.783ZM19.221 140.44L4.942 148.776L9.221 151.268C21.702 158.536 83.021 193 83.472 193C83.762 193 84 185.184 84 175.632V158.263L60.089 145.132C46.938 137.909 35.576 132.023 34.839 132.052C34.103 132.081 27.074 135.855 19.221 140.44ZM116.493 144.073C104.397 150.713 93.487 156.798 92.25 157.596C90.061 159.007 90 159.511 90 176.096C90 190.027 90.251 193.087 91.371 192.823C93.976 192.209 168.955 149.497 168.728 148.757C168.428 147.779 140.972 132 139.57 132C138.974 132 128.59 137.433 116.493 144.073Z\"\n                      fill=\"black\"\n                    />\n                  </svg>\n\n                  <p>webpack</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                    <path d=\"M220.8 123.3c1 .5 1.8 1.7 3 1.7 1.1 0 2.8-.4 2.9-1.5.2-1.4-1.9-2.3-3.2-2.9-1.7-.7-3.9-1-5.5-.1-.4.2-.8.7-.6 1.1.3 1.3 2.3 1.1 3.4 1.7zm-21.9 1.7c1.2 0 2-1.2 3-1.7 1.1-.6 3.1-.4 3.5-1.6.2-.4-.2-.9-.6-1.1-1.6-.9-3.8-.6-5.5.1-1.3.6-3.4 1.5-3.2 2.9.1 1 1.8 1.5 2.8 1.4zM420 403.8c-3.6-4-5.3-11.6-7.2-19.7-1.8-8.1-3.9-16.8-10.5-22.4-1.3-1.1-2.6-2.1-4-2.9-1.3-.8-2.7-1.5-4.1-2 9.2-27.3 5.6-54.5-3.7-79.1-11.4-30.1-31.3-56.4-46.5-74.4-17.1-21.5-33.7-41.9-33.4-72C311.1 85.4 315.7.1 234.8 0 132.4-.2 158 103.4 156.9 135.2c-1.7 23.4-6.4 41.8-22.5 64.7-18.9 22.5-45.5 58.8-58.1 96.7-6 17.9-8.8 36.1-6.2 53.3-6.5 5.8-11.4 14.7-16.6 20.2-4.2 4.3-10.3 5.9-17 8.3s-14 6-18.5 14.5c-2.1 3.9-2.8 8.1-2.8 12.4 0 3.9.6 7.9 1.2 11.8 1.2 8.1 2.5 15.7.8 20.8-5.2 14.4-5.9 24.4-2.2 31.7 3.8 7.3 11.4 10.5 20.1 12.3 17.3 3.6 40.8 2.7 59.3 12.5 19.8 10.4 39.9 14.1 55.9 10.4 11.6-2.6 21.1-9.6 25.9-20.2 12.5-.1 26.3-5.4 48.3-6.6 14.9-1.2 33.6 5.3 55.1 4.1.6 2.3 1.4 4.6 2.5 6.7v.1c8.3 16.7 23.8 24.3 40.3 23 16.6-1.3 34.1-11 48.3-27.9 13.6-16.4 36-23.2 50.9-32.2 7.4-4.5 13.4-10.1 13.9-18.3.4-8.2-4.4-17.3-15.5-29.7zM223.7 87.3c9.8-22.2 34.2-21.8 44-.4 6.5 14.2 3.6 30.9-4.3 40.4-1.6-.8-5.9-2.6-12.6-4.9 1.1-1.2 3.1-2.7 3.9-4.6 4.8-11.8-.2-27-9.1-27.3-7.3-.5-13.9 10.8-11.8 23-4.1-2-9.4-3.5-13-4.4-1-6.9-.3-14.6 2.9-21.8zM183 75.8c10.1 0 20.8 14.2 19.1 33.5-3.5 1-7.1 2.5-10.2 4.6 1.2-8.9-3.3-20.1-9.6-19.6-8.4.7-9.8 21.2-1.8 28.1 1 .8 1.9-.2-5.9 5.5-15.6-14.6-10.5-52.1 8.4-52.1zm-13.6 60.7c6.2-4.6 13.6-10 14.1-10.5 4.7-4.4 13.5-14.2 27.9-14.2 7.1 0 15.6 2.3 25.9 8.9 6.3 4.1 11.3 4.4 22.6 9.3 8.4 3.5 13.7 9.7 10.5 18.2-2.6 7.1-11 14.4-22.7 18.1-11.1 3.6-19.8 16-38.2 14.9-3.9-.2-7-1-9.6-2.1-8-3.5-12.2-10.4-20-15-8.6-4.8-13.2-10.4-14.7-15.3-1.4-4.9 0-9 4.2-12.3zm3.3 334c-2.7 35.1-43.9 34.4-75.3 18-29.9-15.8-68.6-6.5-76.5-21.9-2.4-4.7-2.4-12.7 2.6-26.4v-.2c2.4-7.6.6-16-.6-23.9-1.2-7.8-1.8-15 .9-20 3.5-6.7 8.5-9.1 14.8-11.3 10.3-3.7 11.8-3.4 19.6-9.9 5.5-5.7 9.5-12.9 14.3-18 5.1-5.5 10-8.1 17.7-6.9 8.1 1.2 15.1 6.8 21.9 16l19.6 35.6c9.5 19.9 43.1 48.4 41 68.9zm-1.4-25.9c-4.1-6.6-9.6-13.6-14.4-19.6 7.1 0 14.2-2.2 16.7-8.9 2.3-6.2 0-14.9-7.4-24.9-13.5-18.2-38.3-32.5-38.3-32.5-13.5-8.4-21.1-18.7-24.6-29.9s-3-23.3-.3-35.2c5.2-22.9 18.6-45.2 27.2-59.2 2.3-1.7.8 3.2-8.7 20.8-8.5 16.1-24.4 53.3-2.6 82.4.6-20.7 5.5-41.8 13.8-61.5 12-27.4 37.3-74.9 39.3-112.7 1.1.8 4.6 3.2 6.2 4.1 4.6 2.7 8.1 6.7 12.6 10.3 12.4 10 28.5 9.2 42.4 1.2 6.2-3.5 11.2-7.5 15.9-9 9.9-3.1 17.8-8.6 22.3-15 7.7 30.4 25.7 74.3 37.2 95.7 6.1 11.4 18.3 35.5 23.6 64.6 3.3-.1 7 .4 10.9 1.4 13.8-35.7-11.7-74.2-23.3-84.9-4.7-4.6-4.9-6.6-2.6-6.5 12.6 11.2 29.2 33.7 35.2 59 2.8 11.6 3.3 23.7.4 35.7 16.4 6.8 35.9 17.9 30.7 34.8-2.2-.1-3.2 0-4.2 0 3.2-10.1-3.9-17.6-22.8-26.1-19.6-8.6-36-8.6-38.3 12.5-12.1 4.2-18.3 14.7-21.4 27.3-2.8 11.2-3.6 24.7-4.4 39.9-.5 7.7-3.6 18-6.8 29-32.1 22.9-76.7 32.9-114.3 7.2zm257.4-11.5c-.9 16.8-41.2 19.9-63.2 46.5-13.2 15.7-29.4 24.4-43.6 25.5s-26.5-4.8-33.7-19.3c-4.7-11.1-2.4-23.1 1.1-36.3 3.7-14.2 9.2-28.8 9.9-40.6.8-15.2 1.7-28.5 4.2-38.7 2.6-10.3 6.6-17.2 13.7-21.1.3-.2.7-.3 1-.5.8 13.2 7.3 26.6 18.8 29.5 12.6 3.3 30.7-7.5 38.4-16.3 9-.3 15.7-.9 22.6 5.1 9.9 8.5 7.1 30.3 17.1 41.6 10.6 11.6 14 19.5 13.7 24.6zM173.3 148.7c2 1.9 4.7 4.5 8 7.1 6.6 5.2 15.8 10.6 27.3 10.6 11.6 0 22.5-5.9 31.8-10.8 4.9-2.6 10.9-7 14.8-10.4s5.9-6.3 3.1-6.6-2.6 2.6-6 5.1c-4.4 3.2-9.7 7.4-13.9 9.8-7.4 4.2-19.5 10.2-29.9 10.2s-18.7-4.8-24.9-9.7c-3.1-2.5-5.7-5-7.7-6.9-1.5-1.4-1.9-4.6-4.3-4.9-1.4-.1-1.8 3.7 1.7 6.5z\" />\n                  </svg>\n                  <p>Linux</p>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n                    <path d=\"M14 95.7924C14 42.8877 56.8878 0 109.793 0H274.161C327.066 0 369.954 42.8877 369.954 95.7924C369.954 129.292 352.758 158.776 326.711 175.897C352.758 193.019 369.954 222.502 369.954 256.002C369.954 308.907 327.066 351.795 274.161 351.795H272.081C247.279 351.795 224.678 342.369 207.666 326.904V415.167C207.666 468.777 163.657 512 110.309 512C57.5361 512 14 469.243 14 416.207C14 382.709 31.1945 353.227 57.2392 336.105C31.1945 318.983 14 289.5 14 256.002C14 222.502 31.196 193.019 57.2425 175.897C31.196 158.776 14 129.292 14 95.7924ZM176.288 191.587H109.793C74.2172 191.587 45.3778 220.427 45.3778 256.002C45.3778 291.44 73.9948 320.194 109.381 320.416C109.518 320.415 109.655 320.415 109.793 320.415H176.288V191.587ZM207.666 256.002C207.666 291.577 236.505 320.417 272.081 320.417H274.161C309.737 320.417 338.576 291.577 338.576 256.002C338.576 220.427 309.737 191.587 274.161 191.587H272.081C236.505 191.587 207.666 220.427 207.666 256.002ZM109.793 351.795C109.655 351.795 109.518 351.794 109.381 351.794C73.9948 352.015 45.3778 380.769 45.3778 416.207C45.3778 451.652 74.6025 480.622 110.309 480.622C146.591 480.622 176.288 451.186 176.288 415.167V351.795H109.793ZM109.793 31.3778C74.2172 31.3778 45.3778 60.2173 45.3778 95.7924C45.3778 131.368 74.2172 160.207 109.793 160.207H176.288V31.3778H109.793ZM207.666 160.207H274.161C309.737 160.207 338.576 131.368 338.576 95.7924C338.576 60.2173 309.737 31.3778 274.161 31.3778H207.666V160.207Z\" />\n                  </svg>\n                  <p>Figma</p>\n                </div>\n              </li>\n            </ul>\n          </StyledListContainer>\n        </StyledContainer>\n      )}\n    </StyledDiv>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport WaveSVG from \"./WaveSVG\"\nimport Skills from \"./Skills\"\nimport Portrait from \"./Portrait\"\nimport FullSkills from \"./FullSkills\"\nimport { device } from \"../config/config\"\n\nconst StyledSection = styled.section`\n  @import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap\");\n  font-family: \"Poppins\", sans-serif;\n  margin-top: 20rem;\n  margin-bottom: -20rem;\n  color: #07093f;\n`\n\nconst StyledHeading = styled.h1`\n  text-align: center;\n  font-size: 3rem;\n  background: hsl(184, 74%, 44%);\n  margin: 2rem 0 0 0;\n  padding-bottom: 4rem;\n\n  @media only screen and ${device.tablet} {\n    padding-top: 4rem;\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background: hsl(184, 74%, 44%);\n  background-color: \"#07093f\";\n  padding: 0 3rem 10rem 3rem;\n\n  p {\n    color: hsl(184, 74%, 44%);\n    font-size: 1.25rem;\n    font-weight: bold;\n    text-align: justify;\n  }\n\n  @media only screen and ${device.tablet} {\n    p {\n      font-size: 0.65rem;\n    }\n  }\n  @media only screen and (max-width: 600px) {\n    padding: 0 1rem 5rem 1rem;\n    .content {\n      flex-direction: column-reverse !important;\n    }\n    .left-side {\n      padding-top: 0 !important;\n      text-align: center;\n    }\n  }\n`\n\nconst StyledContainer = styled.div`\n  margin-top: -2rem;\n`\n\nexport default function About() {\n  const BG_COLOR = \"hsl(184, 74%, 44%)\"\n\n  return (\n    <StyledSection>\n      <WaveSVG bg={BG_COLOR} />\n      <StyledContainer>\n        <StyledHeading>About Me</StyledHeading>\n        <StyledDiv>\n          <div\n            style={{\n              backgroundColor: \"#07093f\",\n\n              borderRadius: \"5px\",\n            }}\n          >\n            <div\n              className=\"content\"\n              style={{ display: \"flex\", flexDirection: \"row\" }}\n            >\n              <div\n                className=\"left-side\"\n                style={{ width: \"100%\", padding: \"2rem\" }}\n              >\n                <p>\n                  I'm a huge believer in challenging myself and always learning\n                  something new. A good word to describe me is \"synergistic.\" I\n                  amplify the strengths in others when I collaborate in a team\n                  setting as we work toward a common goal. I am very adaptable\n                  and can collaborate with a team or work independently as well.\n                  I write clean, efficient, and maintainable code and have been\n                  studying ways to improve my code since I began my programming\n                  journey. My love for programming has been ever-growing and I\n                  am constantly motivated to learn more about the world of\n                  programming and computer science.\n                </p>\n                <Skills />\n              </div>\n              <Portrait />\n            </div>\n            <FullSkills />\n          </div>\n        </StyledDiv>\n      </StyledContainer>\n      <div style={{ paddingBottom: \"20rem\", marginBottom: \"-20rem\" }}></div>\n    </StyledSection>\n  )\n}\n","import React, { useState, useEffect, useRef } from \"react\"\nimport styled from \"styled-components\"\nimport { device } from \"../config/config\"\n\nconst StyledContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: hsl(184, 74%, 44%);\n  border-radius: 5px;\n  max-width: 50vw;\n  max-height: 100%;\n\n  @media only screen and ${device.laptop} {\n    max-width: 70vw;\n  }\n  @media only screen and ${device.tablet} {\n    max-width: 90vw;\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  max-width: 100vw;\n  height: 100%;\n\n  .imageContainerParent {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .imageContainer {\n    margin-bottom: 1rem;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n  }\n\n  .image {\n    border-radius: 10px;\n    height: 100%;\n    max-width: 100%;\n    ${\"\" /* max-height: 50%; */}\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 1rem;\n    display: block;\n  }\n\n  .contentContainer {\n    height: 100%;\n  }\n\n  .right-arrow,\n  .left-arrow {\n    position: absolute;\n    top: 50%;\n    font-size: 10rem;\n    color: hsl(184, 74%, 44%);\n    z-index: 10;\n    cursor: pointer;\n    user-select: none;\n    height: 5rem;\n    transition: opacity 0.25s, transform 0.25s;\n    transition-timing-function: cubic-bezier(0.75, -3, 0.25, 4);\n  }\n\n  .right-arrow:hover,\n  .left-arrow:hover {\n    cursor: pointer;\n    opacity: 70%;\n    transform: scale(1.03);\n  }\n\n  .right-arrow {\n    right: -7rem;\n  }\n\n  .left-arrow {\n    left: -7rem;\n  }\n\n  .slide {\n    opacity: 0;\n    transition-duration: 1s ease;\n  }\n\n  .slide.active {\n    opacity: 1;\n    transition-duration: 1s;\n    transform: scale(0.92);\n  }\n  @media only screen and ${device.desktop} {\n    .right-arrow-tablet,\n    .left-arrow-tablet {\n      display: none;\n    }\n\n    .image {\n      max-height: 50vh;\n    }\n  }\n  @media only screen and ${device.tablet} {\n    justify-content: center;\n    .right-arrow,\n    .left-arrow {\n      display: none;\n    }\n    .right-arrow-tablet,\n    .left-arrow-tablet {\n      display: block;\n      font-size: 3rem;\n      width: 10%;\n      margin: auto;\n    }\n    .content {\n      width: 80%;\n    }\n    .image {\n      max-height: 40vh;\n    }\n  }\n\n  @media only screen and ${device.mobile} {\n    .image {\n      max-height: 40vh;\n    }\n  }\n`\n\nconst StyledLinkContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  justify-content: center;\n  gap: 0.5rem;\n\n  a {\n    text-decoration: none;\n    color: hsl(184, 74%, 44%);\n    background: hsl(238, 80%, 14%);\n    width: 100%;\n    border-radius: 5px;\n    transition: opacity 0.25s, transform 0.25s;\n    transition-timing-function: cubic-bezier(0.75, -3, 0.25, 4);\n  }\n  a:hover {\n    cursor: pointer;\n    opacity: 70%;\n    transform: scale(1.02);\n  }\n  button {\n    padding-top: 1rem;\n    color: inherit;\n    background-color: inherit;\n    border: none;\n  }\n\n  div {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 1rem;\n  }\n  p {\n    display: inline-block;\n    font-size: 1.2rem;\n    font-weight: bold;\n  }\n  p:hover {\n    cursor: pointer;\n  }\n\n  @media only screen and ${device.tablet} {\n    p {\n      font-size: 1rem;\n    }\n  }\n`\n\nconst StyledTitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  color: hsl(184, 74%, 44%);\n  background: hsl(238, 80%, 14%);\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border-radius: 5px;\n  width: 100%;\n\n  h5 {\n    font-size: 2rem;\n    font-weight: bold;\n    margin: 0;\n  }\n\n  p {\n    width: 100%;\n    max-width: 100%;\n    font-size: 1.5rem;\n  }\n  & * {\n    display: inline-block;\n  }\n\n  @media only screen and ${device.tablet} {\n    display: flex;\n    flex-direction: row;\n\n    h5 {\n      font-size: 1.5rem;\n    }\n    p {\n      font-size: 1rem;\n    }\n\n    .left-arrow-tablet,\n    .right-arrow-tablet {\n      display: block !important;\n    }\n  }\n  @media only screen and ${device.mobile} {\n    div:nth-child(2) {\n      padding: 0 0.5rem;\n    }\n    h5 {\n      font-size: 1rem;\n    }\n    p {\n      font-size: 0.75rem;\n    }\n  }\n`\n\nconst SliderData = [\n  {\n    title: \"Facebook Clone\",\n    description:\n      \"Built with NextJS, Express, and MongoDB. This Facebook clone features a comprehensive notification system and GIPHY and YouTube APIs to add some fun to the social media experience.\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657053808/portfolio%20projects/PeekOdinBook-1_eutbql.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/odin-book\",\n    liveURL: \"https://odin-book.vercel.app/\",\n  },\n  {\n    title: \"Reddit Clone\",\n    description:\n      \"Built with React and Firebase. Many of the features of the original Reddit site can be found in this clone.\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657149932/portfolio%20projects/STGRedditClone-1_mj0fbk.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/reddit-clone\",\n    liveURL: \"https://doriandeptuch.github.io/reddit-clone/\",\n  },\n  {\n    title: \"Shopping Cart SPA\",\n    description: \"A climbing-based shopping page that utilizes React router.\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657153566/portfolio%20projects/STGShoppingCart-3_kw4vqw.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/Shopping-Cart\",\n    liveURL: \"https://doriandeptuch.github.io/Shopping-Cart/\",\n  },\n  {\n    title: \"Where's Waldo Game\",\n    description:\n      \"A fun twist on the classic Where's Waldo Game. There are now multiple objects to find in this iteration of the game.\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657153565/portfolio%20projects/STGWheresWaldo-3_yb9tcd.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/wheres-waldo\",\n    liveURL: \"https://doriandeptuch.github.io/wheres-waldo/\",\n  },\n  {\n    title: \"Memory Card Game\",\n    description:\n      \"A Pokemon based Memory card game that utilizes Data fetching in React that creates a memorable challenge.\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657149932/portfolio%20projects/STGMemoryCard-1_rmip5k.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/memory-card\",\n    liveURL: \"https://doriandeptuch.github.io/memory-card/\",\n  },\n  {\n    title: \"The Next Web CSS Clone\",\n    description:\n      \"Built with a mobile-first design philisophy using HTML and SCSS with an emphasis on responsive design.\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657153566/portfolio%20projects/STGTNWClone-2_g3q6en.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/the-next-web-clone\",\n    liveURL: \"https://doriandeptuch.github.io/the-next-web-clone/\",\n  },\n  {\n    title: \"YouTube CSS Clone.\",\n    description: \"A 1:1 style clone of a YouTube video page\",\n    image:\n      \"https://res.cloudinary.com/dsykkv6uh/image/upload/v1657153566/portfolio%20projects/STGYouTubeClone-3_zle2sb.gif\",\n    codeURL: \"https://github.com/DorianDeptuch/embedding-images-and-video\",\n    liveURL: \"https://doriandeptuch.github.io/embedding-images-and-video/\",\n  },\n]\n\nconst Carousel = () => {\n  const [current, setCurrent] = useState(0)\n  const [height, setHeight] = useState(\"auto\")\n  const [width, setWidth] = useState(\"auto\")\n  const ref = useRef(null)\n  const length = SliderData.length\n\n  const handleKeyDown = e => {\n    if (e.keyCode === 37) {\n      prevSlide()\n    }\n    if (e.keyCode === 39) {\n      nextSlide()\n    } else {\n      return\n    }\n  }\n\n  const nextSlide = () => {\n    setCurrent(current === length - 1 ? 0 : current + 1)\n  }\n\n  const prevSlide = () => {\n    setCurrent(current === 0 ? length - 1 : current - 1)\n  }\n\n  useEffect(() => {\n    setHeight(ref.current.clientHeight)\n    setWidth(ref.current.clientWidth)\n  }, [])\n\n  if (!Array.isArray(SliderData) || SliderData.length <= 0) {\n    return null\n  }\n\n  return (\n    <StyledContainer className=\"slider\">\n      <StyledDiv>\n        <div\n          className=\"left-arrow\"\n          role=\"button\"\n          tabIndex=\"0\"\n          onClick={prevSlide}\n          onKeyDown={handleKeyDown}\n        >\n          &#10094;\n        </div>\n        {SliderData.map((slide, index) => {\n          return (\n            <div\n              className={index === current ? \"slide active\" : \"slide\"}\n              key={index}\n            >\n              {index === current && (\n                <div\n                  style={{ height: \"auto\" }}\n                  className=\"imageContainerParent\"\n                >\n                  <div\n                    style={{ height: height, width: width }}\n                    className=\"imageContainer\"\n                  >\n                    <img\n                      src={slide.image}\n                      alt=\"slider.title\"\n                      className=\"image\"\n                      ref={ref}\n                    />\n                  </div>\n                  <div className=\"contentContainer\">\n                    <StyledTitleContainer>\n                      <div\n                        style={{ display: \"none\" }}\n                        className=\"left-arrow-tablet\"\n                        role=\"button\"\n                        tabIndex=\"0\"\n                        onClick={prevSlide}\n                        onKeyDown={handleKeyDown}\n                      >\n                        &#10094;\n                      </div>\n                      <div className=\"content\">\n                        <h5>{slide.title}</h5>\n                        <p>{slide.description}</p>\n                      </div>\n                      <div\n                        style={{ display: \"none\" }}\n                        className=\"left-arrow-tablet\"\n                        role=\"button\"\n                        tabIndex=\"0\"\n                        onClick={prevSlide}\n                        onKeyDown={handleKeyDown}\n                      >\n                        &#10095;\n                      </div>\n                    </StyledTitleContainer>\n                    <StyledLinkContainer>\n                      <a href={slide.codeURL} target=\"_blank\" rel=\"noreferrer\">\n                        <button>\n                          <p>View Code</p>\n                        </button>\n                      </a>\n                      <a href={slide.liveURL} target=\"_blank\" rel=\"noreferrer\">\n                        <button>\n                          <p>View Demo</p>\n                        </button>\n                      </a>\n                    </StyledLinkContainer>\n                  </div>\n                </div>\n              )}\n            </div>\n          )\n        })}\n        <div\n          className=\"right-arrow\"\n          role=\"button\"\n          tabIndex=\"0\"\n          onClick={nextSlide}\n          onKeyDown={handleKeyDown}\n        >\n          &#10095;\n        </div>\n      </StyledDiv>\n    </StyledContainer>\n  )\n}\n\nexport default Carousel\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport WaveSVG from \"./WaveSVG\"\nimport Carousel from \"./Carousel\"\nimport { BACKGROUND } from \"../config/config\"\nimport { device } from \"../config/config\"\n\nconst StyledSection = styled.section``\n\nconst StyledHeading = styled.h1`\n  text-align: center;\n  font-size: 3rem;\n  background-color: hsl(238, 80%, 14%);\n  margin: 2rem 0 0 0;\n  padding-bottom: 4rem;\n  color: hsl(184, 74%, 44%);\n\n  @media only screen and ${device.tablet} {\n    padding-top: 4rem;\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background-color: hsl(238, 80%, 14%);\n  padding-bottom: 10rem;\n  justify-content: center;\n`\n\nexport default function Projects() {\n  //   const BG_COLOR = \"hsl(332, 87%, 70%)\"\n\n  return (\n    <StyledSection>\n      <WaveSVG bg={BACKGROUND} />\n\n      <div style={{ marginTop: \"-2rem\" }}>\n        <StyledHeading>Featured Projects</StyledHeading>\n        <StyledDiv>\n          <Carousel />\n        </StyledDiv>\n      </div>\n    </StyledSection>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { device } from \"../config/config\"\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 5rem 0;\n  width: 40%;\n\n  div {\n    width: 100%;\n    max-width: ;\n  }\n  svg,\n  path {\n    fill: hsl(184, 74%, 44%);\n  }\n\n  a {\n    color: hsl(184, 74%, 44%);\n    text-decoration: none;\n    height: 5rem;\n    display: inline-block;\n    width: 100%;\n  }\n\n  @media only screen and (max-width: 1600px) {\n    width: 50%;\n  }\n  @media only screen and (max-width: 1330px) {\n    width: 60%;\n  }\n  @media only screen and (max-width: 1130px) {\n    width: 70%;\n  }\n  @media only screen and (max-width: 980px) {\n    width: 80%;\n  }\n  @media only screen and (max-width: 870px) {\n    width: 90%;\n  }\n  @media only screen and ${device.tablet} {\n    width: 70%;\n  }\n  @media only screen and (max-width: 650px) {\n    width: 80%;\n  }\n  @media only screen and (max-width: 560px) {\n    width: 95%;\n  }\n  @media only screen and ${device.mobile} {\n    padding: 2rem 0;\n    width: 80%;\n  }\n  @media only screen and (max-width: 420px) {\n    width: 100%;\n    padding: 1rem;\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 5rem;\n  align-items: center;\n  justify-content: center;\n  transition: opacity 0.5s ease, transform 0.5s ease;\n  margin: 1rem 0;\n  width: 100%;\n\n  .key,\n  .value {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    align-items: center;\n\n    p {\n      margin: 0;\n    }\n  }\n\n  .value {\n    justify-content: flex-end;\n  }\n\n  svg {\n    margin-right: 2rem;\n  }\n\n  &:hover {\n    cursor: pointer;\n    opacity: 70%;\n    transform: scale(1.05);\n  }\n\n  & > * {\n    margin: 1rem;\n  }\n  p {\n    display: inline-block;\n    font-size: 1.5rem;\n    font-weight: bold;\n  }\n\n  svg,\n  path {\n    fill: hsl(184, 74%, 44%);\n    height: 100%;\n  }\n\n  @media only screen and ${device.tablet} {\n    & > * {\n      margin: 0.5rem;\n    }\n\n    p {\n      font-size: 1rem;\n    }\n\n    svg,\n    path {\n      height: 70%;\n    }\n  }\n  @media only screen and ${device.mobile} {\n    & > * {\n      margin: 0.25rem;\n    }\n\n    p {\n      font-size: 0.75rem;\n    }\n\n    svg,\n    path {\n      height: 50%;\n    }\n    svg {\n      margin-right: 1rem;\n    }\n  }\n\n  @media only screen and (max-width: 380px) {\n    p {\n      font-size: 0.6rem;\n    }\n    svg {\n      transform: scale(0.8);\n      margin-right: 0.75rem;\n    }\n    ${\"\" /* width: 90%; */}\n  }\n`\n\nexport default function ContactIcons() {\n  return (\n    <StyledContainer>\n      <div>\n        <a\n          href=\"emailto:dorian.deptuch@gmail.com\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <StyledDiv>\n            <div className=\"key\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path d=\"M464 64C490.5 64 512 85.49 512 112C512 127.1 504.9 141.3 492.8 150.4L275.2 313.6C263.8 322.1 248.2 322.1 236.8 313.6L19.2 150.4C7.113 141.3 0 127.1 0 112C0 85.49 21.49 64 48 64H464zM217.6 339.2C240.4 356.3 271.6 356.3 294.4 339.2L512 176V384C512 419.3 483.3 448 448 448H64C28.65 448 0 419.3 0 384V176L217.6 339.2z\" />\n              </svg>\n              <p>E-Mail:</p>\n            </div>\n            <div className=\"value\">\n              <p>dorian.deptuch@gmail.com</p>\n            </div>\n          </StyledDiv>\n        </a>\n        <a\n          href=\"https://www.linkedin.com/in/doriandeptuch/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <StyledDiv>\n            <div className=\"key\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                <path d=\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\" />\n              </svg>\n              <p>LinkedIn:</p>\n            </div>\n            <div className=\"value\">\n              <p>linkedin.com/in/doriandeptuch/</p>\n            </div>\n          </StyledDiv>\n        </a>\n        <a\n          href=\"https://github.com/DorianDeptuch\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <StyledDiv>\n            <div className=\"key\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\">\n                <path d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\" />\n              </svg>\n              <p>GitHub:</p>\n            </div>\n            <div className=\"value\">\n              <p>github.com/DorianDeptuch</p>\n            </div>\n          </StyledDiv>\n        </a>\n      </div>\n    </StyledContainer>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport WaveSVG from \"./WaveSVG\"\nimport { PRIMARY } from \"../config/config\"\nimport ContactIcons from \"./ContactIcons\"\nimport { device } from \"../config/config\"\n\nconst StyledSection = styled.section`\n  color: #07093f;\n`\n\nconst StyledContainer = styled.div`\n  margin-top: -2.1rem;\n`\n\nconst StyledHeading = styled.h1`\n  text-align: center;\n  font-size: 3rem;\n  background: hsl(184, 74%, 44%);\n  margin: 2rem 0 0 0;\n  padding-bottom: 4rem;\n\n  @media only screen and ${device.tablet} {\n    padding-top: 4rem;\n  }\n`\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background: hsl(184, 74%, 44%);\n  background-color: \"#07093f\";\n\n  padding: 0 3rem 10rem 3rem;\n\n  @media only screen and ${device.tablet} {\n    padding: 0 1rem 10rem 1rem;\n  }\n`\n\nexport default function Contact() {\n  const BG_COLOR = PRIMARY\n  return (\n    <StyledSection>\n      <WaveSVG bg={BG_COLOR} />\n      <StyledContainer>\n        <StyledHeading>Contact Me</StyledHeading>\n        <StyledDiv>\n          <div\n            style={{\n              backgroundColor: \"#07093f\",\n              width: \"100%\",\n              borderRadius: \"5px\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <ContactIcons />\n          </div>\n        </StyledDiv>\n      </StyledContainer>\n    </StyledSection>\n  )\n}\n","import * as React from \"react\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/seo\"\nimport Hero from \"../components/Hero\"\nimport About from \"../components/About\"\nimport Projects from \"../components/Projects\"\nimport Contact from \"../components/Contact\"\nimport { BACKGROUND, PRIMARY } from \"../config/config\"\n\nconst IndexPage = () => (\n  <Layout>\n    <Seo title=\"Home\" />\n    <Hero />\n    <About />\n    <div style={{ backgroundColor: PRIMARY }}>\n      <Projects />\n    </div>\n    <div style={{ backgroundColor: BACKGROUND }}>\n      <Contact />\n    </div>\n  </Layout>\n)\n\nexport default IndexPage\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","q","H","P","srcSet","decoding","undefined","fallback","t","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","StyledFooter","styled","StyledLayout","Date","getFullYear","BACKGROUND","PRIMARY","device","mobile","tablet","laptop","desktop","rotateCWAnimation","keyframes","rotateCCWAnimation","StyledDiv","HeroSVG","xmlns","version","xmlnsXlink","xmlnsSvgjs","viewBox","x1","y1","x2","y2","id","offset","y","stroke","fill","r","cx","cy","textAnimation","shadowAnimation","shadowAnimationTablet","shadowAnimationMobile","fillAnimation","DorianDeptuch","useState","setBackgroundColor","preserveAspectRatio","d","mask","fadeInAnimation","StyledHeading","HeroHeading","headingRef","scrollIntoView","behavior","block","inline","flexDirection","StyledSection","_taggedTemplateLiteralLoose","strings","raw","waveAnimation","WaveSVG","bg","StyledContainer","Skills","Portrait","S","margin","FadeInAnimation","StyledButton","StyledListContainer","latop","StyledButtonContainer","FullSkills","open","setOpen","onClick","href","resume","target","rel","About","borderRadius","padding","paddingBottom","marginBottom","StyledLinkContainer","StyledTitleContainer","SliderData","title","description","codeURL","liveURL","setCurrent","setHeight","setWidth","handleKeyDown","keyCode","prevSlide","nextSlide","clientHeight","clientWidth","tabIndex","onKeyDown","slide","index","Projects","marginTop","ContactIcons","Contact","justifyContent"],"sourceRoot":""}